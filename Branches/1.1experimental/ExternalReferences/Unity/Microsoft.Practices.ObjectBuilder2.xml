<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.ObjectBuilder2</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.ObjectBuilder2.Builder">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilder"/>. It contains all the default strategies shipped
            with ObjectBuilder.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuilder">
            <summary>
            Represents the main interface for an object builder.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilder.BuildUp(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.IStrategyChain,System.Object,System.Object)">
            <summary>
            Performs a build operation.
            </summary>
            <remarks>
            This operation uses the strategies and permanent policies already configured
            into the builder, combined with the optional transient policies, and starts a build
            operation. Transient policies override any built-in policies, when present.
            </remarks>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this build operation.</param>
            <param name="policies">
            The transient policies to apply to this build. These
            policies take precedence over any permanent policies built into the builder.
            </param>
            <param name="strategies">
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this build operation.
            </param>
            <param name="buildKey">The key of the object to build.</param>
            <param name="existing">
            The existing object to run the build chain on, if one exists.
            If null is passed, a new object instance will typically be created by some strategy
            in the chain.
            </param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilder.BuildUp``1(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.IStrategyChain,System.Object,System.Object)">
            <summary>
            Performs a build operation.
            </summary>
            <remarks>
            This operation uses the strategies and permanent policies already configured
            into the builder, combined with the optional transient policies, and starts a build
            operation. Transient policies override any built-in policies, when present.
            </remarks>
            <typeparam name="TTypeToBuild">The type to build.</typeparam>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this build operation.</param>
            <param name="policies">
            The transient policies to apply to this build. These
            policies take precedence over any permanent policies built into the builder.
            </param>
            <param name="strategies">
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this build operation.
            </param>
            <param name="buildKey">The key of the object to build.</param>
            <param name="existing">
            The existing object to run the build chain on, if one exists.
            If null is passed, a new object instance will typically be created by some strategy
            in the chain.
            </param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilder.TearDown``1(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.IStrategyChain,``0)">
            <summary>
            Performs an unbuild operation.
            </summary>
            <typeparam name="TItem">The type to unbuild. If not provided, it will be inferred from the
            type of item.
            </typeparam>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this build operation.</param>
            <param name="policies">
            The transient policies to apply to this build. These
            policies take precedence over any permanent policies built into the builder.
            </param>
            <param name="strategies">
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this build operation.
            </param>
            <param name="item">The item to tear down.</param>
            <returns>The torn down item.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Builder.BuildUp(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.IStrategyChain,System.Object,System.Object)">
            <summary>
            Performs a build operation.
            </summary>
            <remarks>
            This operation uses the strategies and permanent policies already configured
            into the builder, combined with the optional transient policies, and starts a build
            operation. Transient policies override any built-in policies, when present.
            </remarks>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this build operation.</param>
            <param name="policies">
            The transient policies to apply to this build. These
            policies take precedence over any permanent policies built into the builder.
            </param>
            <param name="strategies">
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this build operation.
            </param>
            <param name="buildKey">The key of the object to build.</param>
            <param name="existing">
            The existing object to run the build chain on, if one exists.
            If null is passed, a new object instance will typically be created by some strategy
            in the chain.
            </param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Builder.BuildUp``1(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.IStrategyChain,System.Object,System.Object)">
            <summary>
            Performs a build operation.
            </summary>
            <remarks>
            This operation uses the strategies and permanent policies already configured
            into the builder, combined with the optional transient policies, and starts a build
            operation. Transient policies override any built-in policies, when present.
            </remarks>
            <typeparam name="TTypeToBuild">The type to build.</typeparam>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this build operation.</param>
            <param name="policies">
            The transient policies to apply to this build. These
            policies take precedence over any permanent policies built into the builder.
            </param>
            <param name="strategies">
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this build operation.
            </param>
            <param name="buildKey">The key of the object to build.</param>
            <param name="existing">
            The existing object to run the build chain on, if one exists.
            If null is passed, a new object instance will typically be created by some strategy
            in the chain.
            </param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Builder.TearDown``1(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.IStrategyChain,``0)">
            <summary>
            Performs an unbuild operation.
            </summary>
            <typeparam name="TItem">The type to unbuild. If not provided, it will be inferred from the
            type of item.
            </typeparam>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this build operation.</param>
            <param name="policies">
            The transient policies to apply to this build. These
            policies take precedence over any permanent policies built into the builder.
            </param>
            <param name="strategies">
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this build operation.
            </param>
            <param name="item">The item to tear down.</param>
            <returns>The torn down item.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuilderContext">
            <summary>
            Represents the context in which a build-up or tear-down operation runs.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext">
            <summary>
            Represents the context in which a build-up or tear-down operation runs.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderContext.CloneForNewBuild(System.Object,System.Object)">
            <summary>
            Create a new IBuilderContext which has the same strategies, locator, policies, and lifetime
            but a new build key and existing object. Used to execute recursive calls when
            building up dependencies.
            </summary>
            <param name="newBuildKey">Build key for new buildup.</param>
            <param name="newExistingObject">New exsting object for buildup.</param>
            <returns>The new context.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.Strategies">
            <summary>
            Gets the head of the strategy chain.
            </summary>
            <returns>
            The strategy that's first in the chain; returns null if there are no
            strategies in the chain.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.Lifetime">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </summary>
            <value>
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.Locator">
            <summary>
            Gets the locator available to the strategies.
            </summary>
            <value>
            The locator available to the strategies.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.OriginalBuildKey">
            <summary>
            Gets the original build key for the build operation.
            </summary>
            <value>
            The original build key for the build operation.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.PersistentPolicies">
            <summary>
            The set of policies that were passed into this context.
            </summary>
            <remarks>This returns the policies passed into the context.
            Policies added here will remain after buildup completes.</remarks>
            <value>The persistent policies for the current context.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.Policies">
            <summary>
            Gets the policies for the current context. 
            </summary>
            <remarks>Any policies added to this object are transient
            and will be erased at the end of the buildup.</remarks>
            <value>
            The policies for the current context.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.RecoveryStack">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> objects
            that need to execute in event of an exception.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.BuildKey">
            <summary>
            Get the current build key for the current build operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.Existing">
            <summary>
            The current object being built up or torn down.
            </summary>
            <value>
            The current object being manipulated by the build operation. May
            be null if the object hasn't been created yet.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.BuildComplete">
            <summary>
            Flag indicating if the build operation should continue.
            </summary>
            <value>true means that building should not call any more
            strategies, false means continue to the next strategy.</value>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.#ctor(Microsoft.Practices.ObjectBuilder2.IStrategyChain,Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderContext"/> class with a <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/>, 
            <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadWriteLocator"/>, <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/>, <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> and the 
            build key used to start this build operation. 
            </summary>
            <param name="chain">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this context.</param>
            <param name="locator">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadWriteLocator"/> to use for this context.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this context.</param>
            <param name="policies">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to use for this context.</param>
            <param name="originalBuildKey">Build key to start building.</param>
            <param name="existing">The existing object to build up.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.#ctor(Microsoft.Practices.ObjectBuilder2.IStrategyChain,Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Object)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderContext"/> using the explicitly provided
            values.
            </summary>
            <param name="chain">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this context.</param>
            <param name="locator">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadWriteLocator"/> to use for this context.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this context.</param>
            <param name="persistentPolicies">The set of persistent policies to use for this context.</param>
            <param name="transientPolicies">The set of transient policies to use for this context. It is
            the caller's responsibility to ensure that the transient and persistent policies are properly
            combined.</param>
            <param name="buildKey">Build key for this context.</param>
            <param name="existing">Existing object to build up.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.CloneForNewBuild(System.Object,System.Object)">
            <summary>
            Create a new IBuilderContext which has the same strategies, locator, policies, and lifetime
            but a new build key and existing object. Used to execute recursive calls when
            building up dependencies.
            </summary>
            <param name="newBuildKey">Build key for new buildup.</param>
            <param name="newExistingObject">New exsting object for buildup.</param>
            <returns>The new context.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.Strategies">
            <summary>
            Gets the head of the strategy chain.
            </summary>
            <returns>
            The strategy that's first in the chain; returns null if there are no
            strategies in the chain.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.BuildKey">
            <summary>
            Get the current build key for the current build operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.Existing">
            <summary>
            The current object being built up or torn down.
            </summary>
            <value>
            The current object being manipulated by the build operation. May
            be null if the object hasn't been created yet.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.Lifetime">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </summary>
            <value>
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.Locator">
            <summary>
            Gets the locator available to the strategies.
            </summary>
            <value>
            The locator available to the strategies.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.OriginalBuildKey">
            <summary>
            Gets the original build key for the build operation.
            </summary>
            <value>
            The original build key for the build operation.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.PersistentPolicies">
            <summary>
            The set of policies that were passed into this context.
            </summary>
            <remarks>This returns the policies passed into the context.
            Policies added here will remain after buildup completes.</remarks>
            <value>The persistent policies for the current context.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.Policies">
            <summary>
            Gets the policies for the current context. 
            </summary>
            <remarks>
            Any modifications will be transient (meaning, they will be forgotten when 
            the outer BuildUp for this context is finished executing).
            </remarks>
            <value>
            The policies for the current context.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.RecoveryStack">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> objects
            that need to execute in event of an exception.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.BuildComplete">
            <summary>
            Flag indicating if the build operation should continue.
            </summary>
            <value>true means that building should not call any more
            strategies, false means continue to the next strategy.</value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuildFailedException">
            <summary>
            The exception that gets thrown if a build or teardown operation fails.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildFailedException.#ctor(Microsoft.Practices.ObjectBuilder2.IBuilderStrategy,System.Int32,System.Object,System.Exception)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.BuildFailedException"/> instance containing
            the information about the currently executing strategy that caused
            the exception.
            </summary>
            <param name="executingStrategy">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> that was
            executing at the time the exception was thrown.</param>
            <param name="executingStrategyIndex">The index of the current strategy in its
            strategy chain.</param>
            <param name="buildKey">The build key being built up.</param>
            <param name="innerException">Underlying exception.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildFailedException.#ctor">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.BuildFailedException"/>. Do not use this constructor, it
            does not take any of the data that makes this type useful.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildFailedException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.BuildFailedException"/>. Do not use this constructor, it
            does not take any of the data that makes this type useful.
            </summary>
            <param name="message">Error message, ignored.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.BuildFailedException"/>. Do not use this constructor, it
            does not take any of the data that makes this type useful.
            </summary>
            <param name="message">Error message, ignored.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.BuildFailedException"/> from the serialized information.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination. </param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown. </param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception><filterpriority>2</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" /></PermissionSet>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuildFailedException.ExecutingStrategy">
            <summary>
            The strategy that was executing when the exception occurred.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuildFailedException.ExecutingStrategyIndex">
            <summary>
            The index of the currently executing strategy in the build chain.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuildFailedException.BuildKey">
            <summary>
            The build key that was being built at the time of the exception.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuildFailedException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException">
            <summary>
            Represents that a dependency could not be resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with no extra information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with the given message.
            </summary>
            <param name="message">Some random message.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with the given
            message and inner exception.
            </summary>
            <param name="message">Some random message</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with the build key of the object begin built.
            </summary>
            <param name="buildKey">The build key of the object begin built.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException">
            <summary>
            Represents an invalid combination of dependency injection attributes were used.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.#ctor(System.Type,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException"/> class with the <see cref="P:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.Type"/> and member name.
            </summary>
            <param name="type">The <see cref="P:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.Type"/> of object with the invalid attribute.</param>
            <param name="memberName">The member name of <paramref name="type"/> with the invalid attribute.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.#ctor">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException"/> class with uninitialized values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.#ctor(System.String)">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException"/> class with a string message.
            </summary>
            <remarks>The string passed here is ignored, use the 
            <see cref="M:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.#ctor(System.Type,System.String)"/> constructor instead.
            </remarks>
            <param name="message">Some random string.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException"/> class with a string message
            and the given inner exception.
            </summary>
            <remarks>The string passed here is ignored, use the 
            <see cref="M:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.#ctor(System.Type,System.String)"/> constructor instead.
            </remarks>
            <param name="message">Some random string.</param>
            <param name="innerException">Some other exception.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination. </param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown. </param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception><filterpriority>2</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" /></PermissionSet>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.Type">
            <summary>
            Type containing the member with the invalid attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.MemberName">
            <summary>
            Name of the member with the invalid attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.InvalidAttributeException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IRecoveryStack">
            <summary>
            Data structure that stores the set of <see cref="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/>
            objects and executes them when requested.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IRecoveryStack.Add(Microsoft.Practices.ObjectBuilder2.IRequiresRecovery)">
            <summary>
            Add a new <see cref="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> object to this
            list.
            </summary>
            <param name="recovery">Object to add.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IRecoveryStack.ExecuteRecovery">
            <summary>
            Execute the <see cref="M:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery.Recover"/> method
            of everything in the recovery list. Recoveries will execute
            in the opposite order of add - it's a stack.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IRecoveryStack.Count">
            <summary>
            Return the number of recovery objects currently in the stack.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery">
            <summary>
            This interface provides a hook for the builder context to
            implement error recovery when a builder strategy throws
            an exception. Since we can't get try/finally blocks onto
            the call stack for later stages in the chain, we instead
            add these objects to the context. If there's an exception,
            all the current IRequiresRecovery instances will have
            their Recover methods called.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery.Recover">
            <summary>
            A method that does whatever is needed to clean up
            as part of cleaning up after an exception.
            </summary>
            <remarks>
            Don't do anything that could throw in this method,
            it will cause later recover operations to get skipped
            and play real havok with the stack trace.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.AmbiguousInjectionConstructor">
            <summary>
              Looks up a localized string similar to The type {0} has multiple constructors of length {1}. Unable to disambiguate..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.BuildFailedException">
            <summary>
              Looks up a localized string similar to The current build operation failed on strategy type {0}, index {1} for build key {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.CannotExtractTypeFromBuildKey">
            <summary>
              Looks up a localized string similar to Cannot extract type from build key {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.CannotInjectMethodWithOutParam">
            <summary>
              Looks up a localized string similar to The method {1} on type {0} has an out parameter. Injection cannot be performed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.CannotInjectOpenGenericMethod">
            <summary>
              Looks up a localized string similar to The method {1} on type {0} is marked for injection, but it is an open generic method. Injection cannot be performed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.DefaultCreationPolicyCannotCreate">
            <summary>
              Looks up a localized string similar to Default creation policy cannot create for unknown build key {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.KeyAlreadyPresent">
            <summary>
              Looks up a localized string similar to An item with the given key is already present in the dictionary..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.MissingDependency">
            <summary>
              Looks up a localized string similar to Could not resolve dependency for build key {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.MultipleInjectionConstructors">
            <summary>
              Looks up a localized string similar to The type {0} has multiple constructors marked with the InjectionConstructor attribute. Unable to disambiguate..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.MustHaveOpenGenericType">
            <summary>
              Looks up a localized string similar to The supplied type {0} must be an open generic type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.MustHaveSameNumberOfGenericArguments">
            <summary>
              Looks up a localized string similar to The supplied type {0} does not have the same number of generic arguments as the target type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.NoConstructorFound">
            <summary>
              Looks up a localized string similar to The type {0} does not have an accessible constructor..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.NoCreationPolicy">
            <summary>
              Looks up a localized string similar to Could not find creation policy for build key {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.ProvidedStringArgMustNotBeEmpty">
            <summary>
              Looks up a localized string similar to The provided string argument must not be empty..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Properties.Resources.UnknownNotPresentBehavior">
            <summary>
              Looks up a localized string similar to Unknown NotPresentBehavior {0}.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.RecoveryStack">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IRecoveryStack"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.RecoveryStack.Add(Microsoft.Practices.ObjectBuilder2.IRequiresRecovery)">
            <summary>
            Add a new <see cref="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> object to this
            list.
            </summary>
            <param name="recovery">Object to add.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.RecoveryStack.ExecuteRecovery">
            <summary>
            Execute the <see cref="M:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery.Recover"/> method
            of everything in the recovery list. Recoveries will execute
            in the opposite order of add - it's a stack.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.RecoveryStack.Count">
            <summary>
            Return the number of recovery objects currently in the stack.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> which will notify an object about
            the completion of a <see cref="M:Microsoft.Practices.ObjectBuilder2.IBuilder.BuildUp(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.IStrategyChain,System.Object,System.Object)"/> operation, or start of a
            <see cref="M:Microsoft.Practices.ObjectBuilder2.IBuilder.TearDown``1(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.IStrategyChain,``0)"/> operation.
            </summary>
            <remarks>
            This strategy checks the object that is passing through the builder chain to see if it
            implements IBuilderAware and if it does, it will call <see cref="M:Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnBuiltUp(System.Object)"/>
            and <see cref="M:Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnTearingDown"/>. This strategy is meant to be used from the
            <see cref="F:Microsoft.Practices.ObjectBuilder2.BuilderStage.PostInitialization"/> stage.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy">
            <summary>
            Represents a strategy in the <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilder"/>'s chain of responsibility.
            Strategies are required to support both BuildUp and TearDown.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy">
            <summary>
            Represents a strategy in the <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilder"/>'s chain of responsibility.
            Strategies are required to support both BuildUp and TearDown. Although you
            can implement this interface directly, you may also choose to use
            <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> as the base class for your strategies, as
            this class provides useful helper methods and makes support BuildUp and TearDown
            optional.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PreTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PreTearDown method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PostTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PostTearDown method is called when the chain has finished the PreTearDown
            phase and executes in reverse order from the PreTearDown calls.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PreTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PreTearDown method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PostTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PostTearDown method is called when the chain has finished the PreTearDown
            phase and executes in reverse order from the PreTearDown calls.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy.PreTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PreTearDown method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuilderAware">
            <summary>
            Implemented on a class when it wants to receive notifications
            about the build process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnBuiltUp(System.Object)">
            <summary>
            Called by the <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy"/> when the object is being built up.
            </summary>
            <param name="buildKey">The key of the object that was just built up.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnTearingDown">
            <summary>
            Called by the <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy"/> when the object is being torn down.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuilderStage">
            <summary>
            Enumeration to represent the object builder stages.
            </summary>
            <remarks>
            The order of the values in the enumeration is the order in which the stages are run.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.BuilderStage.PreCreation">
            <summary>
            Strategies in this stage run before creation. Typical work done in this stage might
            include strategies that use reflection to set policies into the context that other
            strategies would later use.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.BuilderStage.Creation">
            <summary>
            Strategies in this stage create objects. Typically you will only have a single policy-driven
            creation strategy in this stage.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.BuilderStage.Initialization">
            <summary>
            Strategies in this stage work on created objects. Typical work done in this stage might
            include setter injection and method calls.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.BuilderStage.PostInitialization">
            <summary>
            Strategies in this stage work on objects that are already initialized. Typical work done in
            this stage might include looking to see if the object implements some notification interface
            to discover when its initialization stage has been completed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy">
            <summary>
            Represents a builder policy interface. Since there are no fixed requirements
            for policies, it acts as a marker interface from which to derive all other
            policy interfaces.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy">
            <summary>
            Represents a builder policy for mapping build keys.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy">
            <summary>
            Represents a builder policy for mapping build keys.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy.Map(System.Object)">
            <summary>
            Maps the build key.
            </summary>
            <param name="buildKey">The build key to map.</param>
            <returns>The new build key.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy.#ctor(System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy"/> with the new build key.
            </summary>
            <param name="newBuildKey"></param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy.Map(System.Object)">
            <summary>
            Map the <paramref name="buildKey"/> to a new build key.
            </summary>
            <param name="buildKey">The build key to mapl</param>
            <returns>The new build key.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingStrategy">
            <summary>
            Represents a strategy for mapping build keys in the build up operation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.  Looks for the <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy"/>
            and if found maps the build key for the current operation.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy"/> that can map
            generic types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy.#ctor(System.Object)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy"/> instance
            that will map generic types.
            </summary>
            <param name="destinationKey">Build key to map to. This must be or contain an open generic type.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy.Map(System.Object)">
            <summary>
            Maps the build key.
            </summary>
            <param name="buildKey">The build key to map.</param>
            <returns>The new build key.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that will look for a build plan
            in the current context. If it exists, it invokes it, otherwise
            it creates one and stores it for later, and invokes it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicy`1">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/> that chooses
            constructors based on these criteria: first, pick a constructor marked with the
            <typeparamref name="TInjectionConstructorMarkerAttribute"/> attribute. If there
            isn't one, then choose the constructor with the longest parameter list. If that is ambiguous,
            then throw.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the constructor to choose is ambiguous.</exception>
            <typeparam name="TInjectionConstructorMarkerAttribute">Attribute used to mark the constructor to call.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1">
            <summary>
            Base class that provides an implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/>
            which lets you override how the parameter resolvers are created.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that, when implemented,
            will determine which constructor to call from the build plan.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy.SelectConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Choose the constructor to call for the given type.
            </summary>
            <param name="context">Current build context</param>
            <returns>The chosen constructor.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1.SelectConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
             <summary>
             Choose the constructor to call for the given type.
             </summary>
             <param name="context">Current build context.</param>
             <returns>The chosen constructor.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the constructor to choose is ambiguous.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="param">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1.ConstructorLengthComparer.Compare(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicy`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="param">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SelectedConstructor">
            <summary>
            Objects of this type are the return value from <see cref="M:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy.SelectConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)"/>.
            It encapsulates the desired <see cref="T:System.Reflection.ConstructorInfo"/> with the string keys
            needed to look up the <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for each
            parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1">
            <summary>
            Base class for return values from selector policies that
            return a memberinfo of some sort plus a list of parameter
            keys to look up the parameter resolvers.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters">
            <summary>
            Base class for return of selector policies that need
            to keep track of a set of parameter keys.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters.AddParameterKey(System.String)">
            <summary>
            Add a new parameter key to this object. Keys are assumed
            to be in the order of the parameters to the constructor.
            </summary>
            <param name="newKey">Key for the next parameter to look up.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters.GetParameterKeys">
            <summary>
            The set of keys for the constructor parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1.#ctor(`0)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1"/>, storing
            the given member info.
            </summary>
            <param name="memberInfo">Member info to store.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1.MemberInfo">
            <summary>
            The member info stored.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedConstructor.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.SelectedConstructor"/> instance which
            contains the given constructor.
            </summary>
            <param name="constructor"></param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SelectedConstructor.Constructor">
            <summary>
            The constructor this object wraps.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that emits IL to call constructors
            as part of creating a build plan.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.
            </summary>
            <remarks>Existing object is an instance of <see cref="T:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext"/>.</remarks>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObject(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to throw an exception if
            a dependency cannot be resolved.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> currently being
            used for the build of this object.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext">
            <summary>
            This object tracks the current state of the build plan generation,
            accumulates the IL, provides the preamble &amp; postamble for the dynamic
            method, and tracks things like local variables in the generated IL
            so that they can be reused across IL generation strategies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.#ctor(System.Type)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext"/> that is initialized
            to handle creation of a dynamic method to build the given type.
            </summary>
            <param name="typeToBuild">Type that we're trying to create a build plan for.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetBuildMethod">
            <summary>
            Completes generation of the dynamic method and returns the
            generated dynamic method delegate.
            </summary>
            <returns>The created <see cref="T:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanMethod"/></returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadContext">
            <summary>
            Emit the IL to put the build context on top of the IL stack.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadBuildKey">
            <summary>
            Emit the IL to put the current build key on top of the IL stack.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadExisting">
            <summary>
            Emit the IL to put the current "existing" object on the top of the IL stack.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitStoreExisting">
            <summary>
            Emit the IL to make the top of the IL stack our current "existing" object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadTypeOnStack(System.Type)">
            <summary>
            Emit the IL to load the given <see cref="T:System.Type"/> object onto the top of the IL stack.
            </summary>
            <param name="t">Type to load on the stack.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitResolveDependency(System.Type,System.String)">
            <summary>
            Emit the IL needed to look up an <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> and
            call it to get a value.
            </summary>
            <param name="dependencyType">Type of the dependency to resolve.</param>
            <param name="key">Key to look up the policy by.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetPropertyGetter``2(System.String)">
            <summary>
            A reflection helper method to make it easier to grab a property getter
            <see cref="T:System.Reflection.MethodInfo"/> for the given property.
            </summary>
            <typeparam name="TImplementor">Type that implements the property we want.</typeparam>
            <typeparam name="TProperty">Type of the property.</typeparam>
            <param name="name">Name of the property.</param>
            <returns>The property getter's <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetMethodInfo``1(System.String,System.Type[])">
            <summary>
            A reflection helper method that makes it easier to grab a <see cref="T:System.Reflection.MethodInfo"/>
            for a method.
            </summary>
            <typeparam name="TImplementor">Type that implements the method we want.</typeparam>
            <param name="name">Name of the method.</param>
            <param name="argumentTypes">Types of arguments to the method.</param>
            <returns>The method's <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.IL">
            <summary>
            The underlying <see cref="T:System.Reflection.Emit.ILGenerator"/> that can be used to
            emit IL into the generated dynamic method.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.TypeToBuild">
            <summary>
            The type we're currently creating the method to build.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanMethod">
            <summary>
            A delegate type that defines the signature of the
            dynamic method created by the build plans.
            </summary>
            <param name="context"><see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> used to build up the object.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy"/> that runs the
            given delegate to execute the plan.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy">
            <summary>
            A build plan is an object that, when invoked, will create a new object
            or fill in a given existing one. It encapsulates all the information
            gathered by the strategies to construct a particular object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy.BuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Creates an instance of this build plan's type, or fills
            in the existing type if passed in.
            </summary>
            <param name="context">Context used to build up the object.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanCreatorPolicy"/> implementation
            that constructs a build plan via dynamic IL emission.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanCreatorPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that can create and return an <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy"/>
            for the given build key.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuildPlanCreatorPolicy.CreatePlan(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object)">
            <summary>
            Create a build plan using the given context and build key.
            </summary>
            <param name="context">Current build context.</param>
            <param name="buildKey">Current build key.</param>
            <returns>The build plan.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.IStagedStrategyChain)">
            <summary>
            Construct a <see cref="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy"/> that
            uses the given strategy chain to construct the build plan.
            </summary>
            <param name="strategies"></param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy.CreatePlan(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object)">
            <summary>
            Construct a build plan.
            </summary>
            <param name="context">The current build context.</param>
            <param name="buildKey">The current build key.</param>
            <returns>The created build plan.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodCallStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that generates IL to call
            chosen methods (as specified by the current <see cref="T:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/>)
            as part of object build up.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodCallStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodPropertySetterStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that generates IL to resolve properties
            on an object being built.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodPropertySetterStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that will examine the given
            types and return a sequence of <see cref="T:System.Reflection.MethodInfo"/> objects
            that should be called as part of building the object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy.SelectMethods(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Return the sequence of methods to call while building the target object.
            </summary>
            <param name="context">Current build context.</param>
            <returns>Sequence of methods to call.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicy`1">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/> that selects
            methods by looking for the given <typeparamref name="TMarkerAttribute"/>
            attribute on those methods.
            </summary>
            <typeparam name="TMarkerAttribute">Type of attribute used to mark methods
            to inject.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicyBase`1">
            <summary>
            Base class that provides an implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/>
            which lets you override how the parameter resolvers are created.
            </summary>
            <typeparam name="TMarkerAttribute">Attribute that marks methods that should
            be called.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicyBase`1.SelectMethods(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Return the sequence of methods to call while building the target object.
            </summary>
            <param name="context">Current build context.</param>
            <returns>Sequence of methods to call.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicyBase`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicy`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SelectedMethod">
            <summary>
            Objects of this type are the return value from <see cref="M:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy.SelectMethods(Microsoft.Practices.ObjectBuilder2.IBuilderContext)"/>.
            It encapsulates the desired <see cref="T:System.Reflection.MethodInfo"/> with the string keys
            needed to look up the <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for each
            parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.SelectedMethod"/> instance which
            contains the given method.
            </summary>
            <param name="method">The method</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SelectedMethod.Method">
            <summary>
            The constructor this object wraps.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that returns a sequence
            of properties that should be injected for the given type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy.SelectProperties(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Returns sequence of properties on the given type that
            should be set as part of building that object.
            </summary>
            <param name="context">Current build context.</param>
            <returns>Sequence of <see cref="T:System.Reflection.PropertyInfo"/> objects
            that contain the properties to set.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PropertySelectorBase`1">
            <summary>
            Base class that provides an implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy"/>
            which lets you override how the parameter resolvers are created.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertySelectorBase`1.SelectProperties(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Returns sequence of properties on the given type that
            should be set as part of building that object.
            </summary>
            <param name="context">current build context.</param>
            <returns>Sequence of <see cref="T:System.Reflection.PropertyInfo"/> objects
            that contain the properties to set.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertySelectorBase`1.CreateResolver(System.Reflection.PropertyInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for the given
            property.
            </summary>
            <param name="property">Property to create resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PropertySelectorPolicy`1">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy"/> that looks
            for properties marked with the <typeparamref name="TResolutionAttribute"/>
            attribute that are also settable and not indexers.
            </summary>
            <typeparam name="TResolutionAttribute"></typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertySelectorPolicy`1.CreateResolver(System.Reflection.PropertyInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for the given
            property.
            </summary>
            <param name="property">Property to create resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SelectedProperty">
            <summary>
            Objects of this type are returned from
            <see cref="M:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy.SelectProperties(Microsoft.Practices.ObjectBuilder2.IBuilderContext)"/>.
            This class combines the <see cref="T:System.Reflection.PropertyInfo"/> about
            the property with the string key used to look up the resolver
            for this property's value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedProperty.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.ObjectBuilder2.SelectedProperty"/>
            with the given <see cref="T:System.Reflection.PropertyInfo"/> and key.
            </summary>
            <param name="property">The property.</param>
            <param name="key">Key to use to look up the resolver.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SelectedProperty.Property">
            <summary>
            PropertyInfo for this property.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SelectedProperty.Key">
            <summary>
            Key to look up this property's resolver.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy">
            <summary>
            A builder policy that lets you keep track of the current
            resolvers and will remove them from the given policy set.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy.AddResolverKey(System.Object)">
            <summary>
            Add a new resolver to track by key.
            </summary>
            <param name="key">Key that was used to add the resolver to the policy set.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy.RemoveResolvers(Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Remove the currently tracked resolvers from the given policy list.
            </summary>
            <param name="policies">Policy list to remove the resolvers from.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.AddResolverKey(System.Object)">
            <summary>
            Add a new resolver to track by key.
            </summary>
            <param name="key">Key that was used to add the resolver to the policy set.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.RemoveResolvers(Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Remove the currently tracked resolvers from the given policy list.
            </summary>
            <param name="policies">Policy list to remove the resolvers from.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.GetTracker(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object)">
            <summary>
            Get an instance that implements <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy"/>,
            either the current one in the policy set or creating a new one if it doesn't
            exist.
            </summary>
            <param name="policies">Policy list to look up from.</param>
            <param name="buildKey">Build key to track.</param>
            <returns>The resolver tracker.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.TrackKey(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Object)">
            <summary>
            Add a key to be tracked to the current tracker.
            </summary>
            <param name="policies">Policy list containing the resolvers and trackers.</param>
            <param name="buildKey">Build key for the resolvers being tracked.</param>
            <param name="resolverKey">Key for the resolver.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.RemoveResolvers(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object)">
            <summary>
            Remove the resolvers for the given build key.
            </summary>
            <param name="policies">Policy list containing the build key.</param>
            <param name="buildKey">Build key.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.FixedTypeResolverPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that
            calls back into the build chain to build up the dependency, passing
            a type given at compile time as its build key.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that is used at build plan execution time
            to resolve a dependent value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy.Resolve(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.FixedTypeResolverPolicy.#ctor(System.Type)">
            <summary>
            Create a new instance storing the given type.
            </summary>
            <param name="typeToBuild">Type to resolve.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.FixedTypeResolverPolicy.Resolve(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy">
            <summary>
            Represents a creation policy based on <see cref="M:System.Activator.CreateInstance(System.Type,System.Object[])"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ICreationPolicy">
            <summary>
            Represents a policy for <see cref="T:Microsoft.Practices.ObjectBuilder2.CreationStrategy"/>.
            </summary>d
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ICreationPolicy.Create(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object)">
            <summary>
            Create the object for the given <paramref name="context"/> and <paramref name="buildKey"/>.
            </summary>
            <param name="context">The builder context.</param>
            <param name="buildKey">The key for the object being built.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ICreationPolicy.GetConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object)">
            <summary>
            Gets the constructor to be used to create the object.
            </summary>
            <param name="context">The builder context.</param>
            <param name="buildKey">The key for the object being built.</param>
            <returns>The constructor to use; returns null if no suitable constructor can be found.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ICreationPolicy.GetParameters(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Reflection.ConstructorInfo)">
            <summary>
            Gets the parameter values to be passed to the constructor.
            </summary>
            <param name="context">The builder context.</param>
            <param name="constructor">The constructor that will be used.</param>
            <returns>An array of parameters to pass to the constructor.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ICreationPolicy.SupportsReflection">
            <summary>
            Determines if the policy supports reflection.
            </summary>
            <value>
            true if the policy supports reflection; otherwise, false.
            </value>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.IParameter[])">
            <summary>
            Initalize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy"/> class with an array of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.
            </summary>
            <param name="parameters">An array of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder2.IParameter})">
            <summary>
            Initalize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy"/> class with a collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.
            </summary>
            <param name="parameters">A collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy.Create(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object)">
            <summary>
            Create the object for the given <paramref name="context"/> and <paramref name="buildKey"/>.
            </summary>
            <param name="context">The builder context.</param>
            <param name="buildKey">The key for the object being built.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy.GetConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object)">
            <summary>
            Gets the constructor to be used to create the object.
            </summary>
            <param name="context">The builder context.</param>
            <param name="buildKey">The key for the object being built.</param>
            <returns>The constructor to use; returns null if no suitable constructor can be found.</returns>
            <exception cref="T:System.NotImplementedException">
            Does not support getting a constructor.
            </exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy.GetParameters(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Reflection.ConstructorInfo)">
            <summary>
            Gets the parameter values to be passed to the constructor.
            </summary>
            <param name="context">The builder context.</param>
            <param name="constructor">The constructor that will be used.</param>
            <returns>An array of parameters to pass to the constructor.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy.SupportsReflection">
            <summary>
            Determines if the policy supports reflection.
            </summary>
            <value>
            Returns false.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ConstructorCreationPolicy">
            <summary>
            A creation policy where the constructor to choose is derived from the parameters
            provided by the user.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorCreationPolicy.#ctor(System.Reflection.ConstructorInfo,Microsoft.Practices.ObjectBuilder2.IParameter[])">
            <summary>
            Initalize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy"/> class with a <see cref="T:System.Reflection.ConstructorInfo"/> and an array of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.
            </summary>
            <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo"/> to use to create the object.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorCreationPolicy.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder2.IParameter})">
            <summary>
            Initalize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ActivatorCreationPolicy"/> class with a <see cref="T:System.Reflection.ConstructorInfo"/> and a collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.
            </summary>
            <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo"/> to use to create the object.</param>
            <param name="parameters">A collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorCreationPolicy.Create(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object)">
            <summary>
            Create the object for the given <paramref name="context"/> and <paramref name="buildKey"/>.
            </summary>
            <param name="context">The builder context.</param>
            <param name="buildKey">The key for the object being built.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorCreationPolicy.GetConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object)">
            <summary>
            Gets the constructor to be used to create the object.
            </summary>
            <param name="context">The builder context.</param>
            <param name="buildKey">The key for the object being built.</param>
            <returns>The constructor to use; returns null if no suitable constructor can be found.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorCreationPolicy.GetParameters(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Reflection.ConstructorInfo)">
            <summary>
            Gets the parameter values to be passed to the constructor.
            </summary>
            <param name="context">The builder context.</param>
            <param name="constructor">The constructor that will be used.</param>
            <returns>An array of parameters to pass to the constructor.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ConstructorCreationPolicy.SupportsReflection">
            <summary>
            Determines if the policy supports reflection.
            </summary>
            <value>
            Returns true.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ConstructorReflectionStrategy`2">
            <summary>
            Strategy that performs injection of constructor policies.
            </summary>
            <typeparam name="TInjectionConstructorAttribute">The <see cref="T:System.Type"/> of attribute to look for in the constructor.</typeparam>
            <typeparam name="TDefaultInjectionAttribute">The <see cref="T:System.Type"/> of the default constructor attribute.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ReflectionStrategy`2">
            <summary>
            Represents a generic strategy for all injection attribute processors.
            </summary>
            <typeparam name="TMemberInfo">The <see cref="T:System.Type"/> of member to reflect.</typeparam>
            <typeparam name="TDefaultInjectionAttribute">The <see cref="T:System.Type"/> of attribute for the member.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReflectionStrategy`2.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IMemberInfo{`0},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder2.IParameter})">
            <summary>
            Adds <paramref name="parameters"/> to the appropriate policy.
            </summary>
            <param name="context">The build context.</param>
            <param name="member">The member that's being reflected over.</param>
            <param name="parameters">The parameters used to satisfy the member call.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReflectionStrategy`2.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReflectionStrategy`2.GetMembers(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Retrieves the list of members to iterate looking for 
            injection attributes, such as properties and constructor 
            parameters.
            </summary>
            <param name="context">The build context.</param>
            <returns>
            An enumerable wrapper around the <see cref="T:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1"/> interfaces that
            represent the members to be inspected for reflection.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReflectionStrategy`2.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder2.IMemberInfo{`0})">
            <summary>
            Determine whether a member should be processed. 
            </summary>
            <param name="member">The member to determine processing.</param>
            <returns>true if the member needs processing; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorReflectionStrategy`2.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IMemberInfo{System.Reflection.ConstructorInfo},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder2.IParameter})">
            <summary>
            Adds <paramref name="parameters"/> to the appropriate policy.
            </summary>
            <param name="context">The build context.</param>
            <param name="member">The member that's being reflected over.</param>
            <param name="parameters">The parameters used to satisfy the constructor.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorReflectionStrategy`2.GetMembers(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Retrieves the list of constructors to iterate looking for injection attributes.
            </summary>
            <param name="context">The build context.</param>
            <returns>
            An enumerable wrapper around the <see cref="T:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1"/> interfaces that
            represent the members to be inspected for reflection.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorReflectionStrategy`2.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder2.IMemberInfo{System.Reflection.ConstructorInfo})">
            <summary>
            Determine whether a constructor should be processed. 
            </summary>
            <param name="member">The member to determine processing.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.CreationStrategy">
            <summary>
            Represents a strategy which creates objects.
            </summary>
            <remarks>
            <para>This strategy looks for policies in the context registered under the interface type
            <see cref="T:Microsoft.Practices.ObjectBuilder2.ICreationPolicy"/>. If it cannot find a policy on how to create the object,
            it will select the first constructor that returns from reflection, and re-runs the chain
            to create all the objects required to fulfill the constructor's parameters.</para>
            <para>If the Build method is passed an object via the existing parameter, then it
            will do nothing (since the object already exists). This allows this strategy to be
            in the chain when running dependency injection on existing objects, without fear that
            it will attempt to re-create the object.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.CreationStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DefaultCreationPolicy">
            <summary>
            Default creation policy which selects the first public constructor
            of an object, using the builder to resolve/create any parameters the
            constructor requires.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DefaultCreationPolicy.Create(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object)">
            <summary>
            Create the object for the given <paramref name="context"/> and <paramref name="buildKey"/>.
            </summary>
            <param name="context">The builder context.</param>
            <param name="buildKey">The key for the object being built.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DefaultCreationPolicy.GetBuildKeyFromType(System.Type)">
            <summary>
            Gets the build key from the type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of object to be built.</param>
            <returns>The build key for the object being built.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DefaultCreationPolicy.GetConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object)">
            <summary>
            Gets the constructor to be used to create the object.
            </summary>
            <param name="context">The builder context.</param>
            <param name="buildKey">The key for the object being built.</param>
            <returns>The constructor to use; returns null if no suitable constructor can be found.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DefaultCreationPolicy.GetParameters(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Reflection.ConstructorInfo)">
            <summary>
            Gets the parameter values to be passed to the constructor.
            </summary>
            <param name="context">The builder context.</param>
            <param name="constructor">The constructor that will be used.</param>
            <returns>An array of parameters to pass to the constructor.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DefaultCreationPolicy.GetTypeFromBuildKey(System.Object)">
            <summary>
            Gets the <see cref="T:System.Type"/> of object to build from the <paramref name="buildKey"/>.
            </summary>
            <param name="buildKey">The key of object to be built.</param>
            <returns>The <see cref="T:System.Type"/> of object to be built.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.DefaultCreationPolicy.SupportsReflection">
            <summary>
            Determines if the policy supports reflection.
            </summary>
            <value>
            Returns true.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.InjectionConstructorAttribute">
            <summary>
            Indicates which constructor on an object will be used for dependency injection.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IPolicyList">
            <summary>
            A custom collection over <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Clear``1(System.Object)">
            <summary>
            Removes an individual policy type for a build key.
            </summary>
            <typeparam name="TPolicyInterface">The type the policy was registered as.</typeparam>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Clear(System.Type,System.Object)">
            <summary>
            Removes an individual policy type for a build key.
            </summary>
            <param name="policyInterface">The type of policy to remove.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.ClearAll">
            <summary>
            Removes all policies from the list.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.ClearDefault``1">
            <summary>
            Removes a default policy.
            </summary>
            <typeparam name="TPolicyInterface">The type the policy was registered as.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.ClearDefault(System.Type)">
            <summary>
            Removes a default policy.
            </summary>
            <param name="policyInterface">The type the policy was registered as.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Get``1(System.Object)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="buildKey">The key the policy applies.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Get(System.Type,System.Object)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Get``1(System.Object,System.Boolean)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Get(System.Type,System.Object,System.Boolean)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.GetNoDefault``1(System.Object,System.Boolean)">
            <summary>
            Get the non default policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.GetNoDefault(System.Type,System.Object,System.Boolean)">
            <summary>
            Get the non default policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Set``1(``0,System.Object)">
            <summary>
            Sets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policy">The policy to be registered.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Set(System.Type,Microsoft.Practices.ObjectBuilder2.IBuilderPolicy,System.Object)">
            <summary>
            Sets an individual policy.
            </summary>
            <param name="policyInterface">The <see cref="T:System.Type"/> of the policy.</param>
            <param name="policy">The policy to be registered.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.SetDefault``1(``0)">
            <summary>
            Sets a default policy. When checking for a policy, if no specific individual policy
            is available, the default will be used.
            </summary>
            <typeparam name="TPolicyInterface">The interface to register the policy under.</typeparam>
            <param name="policy">The default policy to be registered.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.SetDefault(System.Type,Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>
            Sets a default policy. When checking for a policy, if no specific individual policy
            is available, the default will be used.
            </summary>
            <param name="policyInterface">The interface to register the policy under.</param>
            <param name="policy">The default policy to be registered.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IStagedStrategyChain">
            <summary>
            This interface defines a standard method to convert any 
            <see cref="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> regardless
            of the stage enum into a regular, flat strategy chain.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IStagedStrategyChain.MakeStrategyChain">
            <summary>
            Convert this <see cref="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> into
            a flat <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/>.
            </summary>
            <returns>The flattened <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain">
            <summary>
            Represents a chain of responsibility for builder strategies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IStrategyChain.Reverse">
            <summary>
            Reverse the order of the strategy chain.
            </summary>
            <returns>The reversed strategy chain.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IStrategyChain.ExecuteBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context,
            calling the Buildup methods on the strategies.
            </summary>
            <param name="context">Context for the build process.</param>
            <returns>The build up object</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IStrategyChain.ExecuteTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context,
            calling the TearDown methods on the strategies.
            </summary>
            <param name="context">Context for the teardown process.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuildKey">
            <summary>
            Represents a build key based on type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuildKey.ReplaceType(System.Type)">
            <summary>
            Construct a new build key object with the current type
            replaced with the specified <paramref name="newType"/>.
            </summary>
            <remarks>This method creates a new build key object, the original is unchanged.</remarks>
            <param name="newType">New type to place in the build key.</param>
            <returns>The new build key.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuildKey.Type">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.ObjectBuilder2.IBuildKey.Type"/> that represents the key.
            </summary>
            <value>
            The <see cref="P:Microsoft.Practices.ObjectBuilder2.IBuildKey.Type"/> that represents the key.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer">
            <summary>
            Represents a lifetime container.
            </summary>
            <remarks>
            A lifetime container tracks the lifetime of an object, and implements
            IDisposable. When the container is disposed, any objects in the
            container which implement IDisposable are also disposed.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Add(System.Object)">
            <summary>
            Adds an object to the lifetime container.
            </summary>
            <param name="item">The item to be added to the lifetime container.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Contains(System.Object)">
            <summary>
            Determine if a given object is in the lifetime container.
            </summary>
            <param name="item">
            The item to locate in the lifetime container.
            </param>
            <returns>
            Returns true if the object is contained in the lifetime
            container; returns false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Remove(System.Object)">
            <summary>
            Removes an item from the lifetime container. The item is
            not disposed.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Count">
            <summary>
            Gets the number of references in the lifetime container
            </summary>
            <value>
            The number of references in the lifetime container
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.LifetimeContainer">
            <summary>
            Represents a lifetime container.
            </summary>
            <remarks>
            A lifetime container tracks the lifetime of an object, and implements
            IDisposable. When the container is disposed, any objects in the
            container which implement IDisposable are also disposed.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Add(System.Object)">
            <summary>
            Adds an object to the lifetime container.
            </summary>
            <param name="item">The item to be added to the lifetime container.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Contains(System.Object)">
            <summary>
            Determine if a given object is in the lifetime container.
            </summary>
            <param name="item">
            The item to locate in the lifetime container.
            </param>
            <returns>
            Returns true if the object is contained in the lifetime
            container; returns false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Microsoft.Practices.ObjectBuilder2.LifetimeContainer"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Dispose(System.Boolean)">
            <summary>
            Releases the managed resources used by the DbDataReader and optionally releases the unmanaged resources. 
            </summary>
            <param name="disposing">
            true to release managed and unmanaged resources; false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the lifetime container.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the life time container. 
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the lifetime container.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the life time container. 
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Remove(System.Object)">
            <summary>
            Removes an item from the lifetime container. The item is
            not disposed.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Count">
            <summary>
            Gets the number of references in the lifetime container
            </summary>
            <value>
            The number of references in the lifetime container
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IReadableLocator">
            <summary>
            Represents a locator that can be read from.
            </summary>
            <remarks>
            <para>A locator is a dictionary of keys to values, but it keeps the values with
            weak references, so that locating an object does not keep it alive. If you
            want to keep the object alive too, you should consider using an
            <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/>.</para>
            <para>Locators have a built-in concept of hierarchy, so you can ask questions
            of a locator and tell it whether to return results from the current locator
            only, or whether to ask the parent locator when local lookups fail.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IReadableLocator.Contains(System.Object)">
            <summary>
            Determine if the locator contains an object for the given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            true if the locator contains an object for the key; returns
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IReadableLocator.FindBy(System.Predicate{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})">
            <summary>
            Finds objects in the locator using the predicate, and returns a temporary locator
            filled with the found objects.
            </summary>
            <param name="predicate">The predicate to test whether to include an object.</param>
            <returns>The new locator</returns>
            <exception cref="T:System.ArgumentNullException">Predicate is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IReadableLocator.Get``1">
            <summary>
            Gets an object from the locator, registered with the key of typeof(T).
            </summary>
            <typeparam name="TItem">The type of the object to find.</typeparam>
            <returns>The object, if found; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IReadableLocator.Get``1(System.Object)">
            <summary>
            Gets an object from the locator, registered with the given key.
            </summary>
            <typeparam name="TItem">The type of the object to find.</typeparam>
            <param name="key">The key that the object is registered with.</param>
            <returns>The object, if found; null otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IReadableLocator.Get(System.Object)">
            <summary>
            Gets an object from the locator, registered with the given key.
            </summary>
            <param name="key">The key that the object is registered with.</param>
            <returns>The object, if found; null otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IReadableLocator.Count">
            <summary>
            Gets the number of items in the locator.
            </summary>
            <value>
            The number of items in the locator.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IReadableLocator.ParentLocator">
            <summary>
            Gets the parent locator.
            </summary>
            <value>
            The parent locator.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IReadableLocator.ReadOnly">
            <summary>
            Determines if the locator is read-only.
            </summary>
            <value>
            true if the locator is read-only; otherwise, false.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IReadWriteLocator">
            <summary>
            Represents a locator that can be read from and written to.
            </summary>
            <remarks>
            <para>
            A locator is dictionary of keys to values, but it keeps the values with
            weak references, so that locating an object does not keep it alive. If you
            want to keep the object alive too, you should consider using an
            <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/>.
            </para>
            <para>
            Locators have a built-in concept of hierarchy, so you can ask questions
            of a locator and tell it whether to return results from the current locator
            only, or whether to ask the parent locator when local lookups fail.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IReadWriteLocator.Add(System.Object,System.Object)">
            <summary>
            Adds an object to the locator, with the given key.
            </summary>
            <param name="key">The key to register the object with.</param>
            <param name="value">The object to be registered.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or value are null.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IReadWriteLocator.Remove(System.Object)">
            <summary>
            Removes an object from the locator.
            </summary>
            <param name="key">The key under which the object was registered.</param>
            <returns>
            Returns true if the object was found in the locator; returns
            false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.Locator">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadableLocator"/> and <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadWriteLocator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ReadWriteLocator">
            <summary>
            Represents an abstract implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadWriteLocator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ReadableLocator">
            <summary>
            Represents an abstract implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadableLocator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadableLocator.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ReadableLocator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadableLocator.#ctor(Microsoft.Practices.ObjectBuilder2.IReadableLocator)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ReadableLocator"/> class with a parent <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadableLocator"/>.
            </summary>
            <param name="parentLocator">A parent <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadableLocator"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadableLocator.Contains(System.Object)">
            <summary>
            Determine if the locator contains an object for the given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            true if the locator contains an object for the key; returns
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadableLocator.FindBy(System.Predicate{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})">
            <summary>
            Finds objects in the locator using the predicate, and returns a temporary locator
            filled with the found objects.
            </summary>
            <param name="predicate">The predicate to test whether to include an object.</param>
            <returns>The new locator</returns>
            <exception cref="T:System.ArgumentNullException">Predicate is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadableLocator.Get``1">
            <summary>
            Gets an object from the locator, registered with the key of typeof(T).
            </summary>
            <typeparam name="TItem">The type of the object to find.</typeparam>
            <returns>The object, if found; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadableLocator.Get``1(System.Object)">
            <summary>
            Gets an object from the locator, registered with the given key.
            </summary>
            <typeparam name="TItem">The type of the object to find.</typeparam>
            <param name="key">The key that the object is registered with.</param>
            <returns>The object, if found; null otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadableLocator.Get(System.Object)">
            <summary>
            Gets an object from the locator, registered with the given key.
            </summary>
            <param name="key">The key that the object is registered with.</param>
            <returns>The object, if found; null otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadableLocator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the locator.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the locator. 
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadableLocator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the locator.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the locator. 
            </returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReadableLocator.Count">
            <summary>
            Gets the number of items in the locator.
            </summary>
            <value>
            The number of items in the locator.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReadableLocator.ParentLocator">
            <summary>
            Gets the parent locator.
            </summary>
            <value>
            The parent locator.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReadableLocator.ReadOnly">
            <summary>
            Determines if the locator is read-only.
            </summary>
            <value>
            true if the locator is read-only; otherwise, false.
            </value>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadWriteLocator.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ReadWriteLocator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadWriteLocator.#ctor(Microsoft.Practices.ObjectBuilder2.IReadableLocator)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ReadWriteLocator"/> class with a parent <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadableLocator"/>.
            </summary>
            <param name="parentLocator">A parent <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadableLocator"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadWriteLocator.Add(System.Object,System.Object)">
            <summary>
            Adds an object to the locator, with the given key.
            </summary>
            <param name="key">The key to register the object with.</param>
            <param name="value">The object to be registered.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or value are null.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadWriteLocator.Remove(System.Object)">
            <summary>
            Removes an object from the locator.
            </summary>
            <param name="key">The key under which the object was registered.</param>
            <returns>
            Returns true if the object was found in the locator; returns
            false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReadWriteLocator.ReadOnly">
            <summary>
            Determines if the locator is read-only.
            </summary>
            <value>
            true if the locator is read-only; otherwise, false.
            </value>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Locator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.Locator"/> class. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Locator.#ctor(Microsoft.Practices.ObjectBuilder2.IReadableLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.Locator"/> class as a child of the <paramref name="parentLocator"/>. 
            </summary>
            <param name="parentLocator">The parent locator.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Locator.Add(System.Object,System.Object)">
            <summary>
            Adds an object to the locator, with the given key.
            </summary>
            <param name="key">The key to register the object with.</param>
            <param name="value">The object to be registered.</param>
            <exception cref="T:System.ArgumentNullException">Key or value are null.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Locator.Contains(System.Object)">
            <summary>
            Determine if the locator contains an object for the given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            true if the locator contains an object for the key; returns
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Locator.Get(System.Object)">
            <summary>
            Gets an object from the locator, registered with the given key.
            </summary>
            <param name="key">The key that the object is registered with.</param>
            <returns>The object, if found; null otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Locator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a locator.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the locator. 
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Locator.Remove(System.Object)">
            <summary>
            Removes an object from the locator.
            </summary>
            <param name="key">The key under which the object was registered.</param>
            <returns>
            Returns true if the object was found in the locator; returns
            false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.Locator.Count">
            <summary>
            Gets the number of items in the locator.
            </summary>
            <value>
            The number of items in the locator.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ReadOnlyLocator">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadableLocator"/> that wraps an existing locator
            to ensure items are not written into the locator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadOnlyLocator.#ctor(Microsoft.Practices.ObjectBuilder2.IReadableLocator)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ReadableLocator"/> class with an <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadableLocator"/> to wrap.
            </summary>
            <param name="innerLocator">The inner locator to be wrapped.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadOnlyLocator.Contains(System.Object)">
            <summary>
            Determine if the locator contains an object for the given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            true if the locator contains an object for the key; returns
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadOnlyLocator.Get(System.Object)">
            <summary>
            Gets an object from the locator, registered with the given key.
            </summary>
            <param name="key">The key that the object is registered with.</param>
            <returns>The object, if found; null otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReadOnlyLocator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the locator.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the locator. 
            </returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReadOnlyLocator.Count">
            <summary>
            Gets the number of items in the locator.
            </summary>
            <value>
            The number of items in the locator.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReadOnlyLocator.ParentLocator">
            <summary>
            Gets the parent locator.
            </summary>
            <value>
            The parent locator.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReadOnlyLocator.ReadOnly">
            <summary>
            Determines if the locator is read-only.
            </summary>
            <value>
            true if the locator is read-only; otherwise, false.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PolicyList">
            <summary>
            A custom collection wrapper over <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.ObjectBuilder2.PolicyList"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.#ctor(Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.ObjectBuilder2.PolicyList"/> class with another policy list.
            </summary>
            <param name="innerPolicyList">An inner policy list to search.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Clear``1(System.Object)">
            <summary>
            Removes an individual policy type for a build key.
            </summary>
            <typeparam name="TPolicyInterface">The type the policy was registered as.</typeparam>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Clear(System.Type,System.Object)">
            <summary>
            Removes an individual policy type for a build key.
            </summary>
            <param name="policyInterface">The type of policy to remove.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.ClearAll">
            <summary>
            Removes all policies from the list.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.ClearDefault``1">
            <summary>
            Removes a default policy.
            </summary>
            <typeparam name="TPolicyInterface">The type the policy was registered as.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.ClearDefault(System.Type)">
            <summary>
            Removes a default policy.
            </summary>
            <param name="policyInterface">The type the policy was registered as.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Get``1(System.Object)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="buildKey">The key the policy applies.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Get(System.Type,System.Object)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Get``1(System.Object,System.Boolean)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Get(System.Type,System.Object,System.Boolean)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.GetNoDefault``1(System.Object,System.Boolean)">
            <summary>
            Get the non default policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.GetNoDefault(System.Type,System.Object,System.Boolean)">
            <summary>
            Get the non default policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Set``1(``0,System.Object)">
            <summary>
            Sets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policy">The policy to be registered.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Set(System.Type,Microsoft.Practices.ObjectBuilder2.IBuilderPolicy,System.Object)">
            <summary>
            Sets an individual policy.
            </summary>
            <param name="policyInterface">The <see cref="T:System.Type"/> of the policy.</param>
            <param name="policy">The policy to be registered.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.SetDefault``1(``0)">
            <summary>
            Sets a default policy. When checking for a policy, if no specific individual policy
            is available, the default will be used.
            </summary>
            <typeparam name="TPolicyInterface">The interface to register the policy under.</typeparam>
            <param name="policy">The default policy to be registered.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.SetDefault(System.Type,Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>
            Sets a default policy. When checking for a policy, if no specific individual policy
            is available, the default will be used.
            </summary>
            <param name="policyInterface">The interface to register the policy under.</param>
            <param name="policy">The default policy to be registered.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.PolicyList.Count">
            <summary>
            Gets the number of items in the locator.
            </summary>
            <value>
            The number of items in the locator.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that controls how instances are
            persisted and recovered from an external store. Used to implement
            things like singletons and per-http-request lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object to store.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy.RemoveValue">
            <summary>
            Remove the value this lifetime policy is managing from backing store.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.LifetimeStrategy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> implementation that uses
            a <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/> to figure out if an object
            has already been created and to update or remove that
            object from some backing store.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SingletonLifetimePolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/> that stores objects in the locator and
            lifetime container provided by the context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SingletonLifetimePolicy.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SingletonLifetimePolicy.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SingletonLifetimePolicy.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SingletonLifetimePolicy.Recover">
            <summary>
            A method that does whatever is needed to clean up
            as part of cleaning up after an exception.
            </summary>
            <remarks>
            Don't do anything that could throw in this method,
            it will cause later recover operations to get skipped
            and play real havok with the stack trace.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.TransientLifetimePolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/> that does nothing,
            ensuring that a new object gets created every time.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.TransientLifetimePolicy.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.TransientLifetimePolicy.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.TransientLifetimePolicy.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IMethodCallInfo">
            <summary>
            Encapsulates a method call.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IMethodCallInfo.Execute(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object,System.Object)">
            <summary>
            ExecuteBuildUp the method to be called.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>.</param>
            <param name="instance">The instance to use to execute the method.</param>
            <param name="buildKey">The key for the object being built.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IMethodCallPolicy">
            <summary>
            Represents a policy for <see cref="T:Microsoft.Practices.ObjectBuilder2.MethodCallStrategy"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IMethodCallPolicy.Methods">
            <summary>
            Gets a collection of methods to be called on the object instance.
            </summary>
            <value>
            A collection of methods to be called on the object instance.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.InjectionMethodAttribute">
            <summary>
            Indicateds the dependency injection should call a method during the build-up of an object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.MethodCallPolicy">
            <summary>
            Represents a policy for <see cref="T:Microsoft.Practices.ObjectBuilder2.MethodCallStrategy"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.MethodCallPolicy.Methods">
            <summary>
            Gets a collection of methods to be called on the object instance.
            </summary>
            <value>
            A collection of methods to be called on the object instance.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.MethodCallStrategy">
            <summary>
            Represents a strategy to call method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodCallStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. Looks for a method call policy for the buildKey and uses it to call a method if found.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.MethodMemberInfo`1">
            <summary>
            Represents the member inforamation for a <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1">
            <summary>
            Interface used by the <see cref="T:Microsoft.Practices.ObjectBuilder2.ReflectionStrategy`2"/> to encapsulate 
            the information required from members that use the strategy. This interface is required because direct access to
            the <see cref="P:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1.MemberInfo"/> object may not give the desired results.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes of the member.
            </summary>
            <returns>An array of the custom attributes.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1.GetParameters">
            <summary>
            Gets the parameters to be passed to the member.
            </summary>
            <returns>The parameters to be passed to the member.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1.MemberInfo">
            <summary>
            Gets the original <see cref="P:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1.MemberInfo"/>.
            </summary>
            <value>
            The original <see cref="P:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1.MemberInfo"/>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1.Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>
            The name of the member.
            </value>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodMemberInfo`1.#ctor(`0)">
            <summary>
            Initialize a new instace of the <see cref="T:Microsoft.Practices.ObjectBuilder2.MethodMemberInfo`1"/> class with the method to wrap.
            </summary>
            <param name="memberInfo">
            The method to wrap.
            </param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodMemberInfo`1.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes for the method.
            </summary>
            <param name="attributeType">The <see cref="T:System.Type"/> of the attributes to get from the method.</param>
            <param name="inherit">true to get inherited attrubutes; otherwise, false.</param>
            <returns>An array of the custom attributes.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodMemberInfo`1.GetParameters">
            <summary>
            The parameters for the method.
            </summary>
            <returns>An array of <see cref="T:System.Reflection.ParameterInfo"/> objects.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.MethodMemberInfo`1.MemberInfo">
            <summary>
            Gets the wrapped method.
            </summary>
            <value>
            The wrapped method.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.MethodMemberInfo`1.Name">
            <summary>
            Gets the name of the method.
            </summary>
            <value>
            The name of the method.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.MethodReflectionStrategy`2">
            <summary>
            Strategy that performs injection of method policies.
            </summary>
            <typeparam name="TInjectionMethodAttribute">The <see cref="T:System.Type"/> of attribute to look for in the method.</typeparam>
            <typeparam name="TDefaultParameterAttribute">The <see cref="T:System.Type"/> of the default parameter attribute.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodReflectionStrategy`2.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IMemberInfo{System.Reflection.MethodInfo},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder2.IParameter})">
            <summary>
            Adds <paramref name="parameters"/> to the appropriate policy.
            </summary>
            <param name="context">The build context.</param>
            <param name="member">The member that's being reflected over.</param>
            <param name="parameters">The parameters used to satisfy the method.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodReflectionStrategy`2.GetMembers(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Retrieves the list of methods to iterate looking for injection attributes.
            </summary>
            <param name="context">The build context.</param>
            <returns>
            An enumerable wrapper around the <see cref="T:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1"/> interfaces that
            represent the members to be inspected for reflection.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodReflectionStrategy`2.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder2.IMemberInfo{System.Reflection.MethodInfo})">
            <summary>
            Determine whether a member should be processed. 
            </summary>
            <param name="member">The member to determine processing.</param>
            <returns>true if the member needs processing; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.NamedMethodCallInfo">
            <summary>
            Encapsulates a call to a named method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedMethodCallInfo.#ctor(System.String,Microsoft.Practices.ObjectBuilder2.IParameter[])">
            <summary>
            Initalize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedMethodCallInfo"/> class with an array of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.
            </summary>
            <param name="methodName">The name of the method to execute.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedMethodCallInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder2.IParameter})">
            <summary>
            Initalize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedMethodCallInfo"/> class with a collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.
            </summary>
            <param name="methodName">The name of the method to execute.</param>
            <param name="parameters">A collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedMethodCallInfo.Execute(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object,System.Object)">
            <summary>
            ExecuteBuildUp the method to be called.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>.</param>
            <param name="instance">The instance to use to execute the method.</param>
            <param name="buildKey">The key for the object being built.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ReflectionMethodCallInfo">
            <summary>
            Encapsulates a reflection method call.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReflectionMethodCallInfo.#ctor(System.Reflection.MethodInfo,Microsoft.Practices.ObjectBuilder2.IParameter[])">
            <summary>
            Initalize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ReflectionMethodCallInfo"/> class with an array of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.
            </summary>
            <param name="method">The method to execute.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReflectionMethodCallInfo.#ctor(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder2.IParameter})">
            <summary>
            Initalize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedMethodCallInfo"/> class with a collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.
            </summary>
            <param name="method">The method to execute.</param>
            <param name="parameters">A collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> instances.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReflectionMethodCallInfo.Execute(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object,System.Object)">
            <summary>
            Execute the method to be called.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>.</param>
            <param name="instance">The instance to use to execute the method.</param>
            <param name="buildKey">The key for the object being built.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReflectionMethodCallInfo.Method">
            <summary>
            Gets the method to execute.
            </summary>
            <value>
            The method to execute.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReflectionMethodCallInfo.Parameters">
            <summary>
            Gets the parameters used in the method call.
            </summary>
            <value>
            The parameters used in the method call.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DependencyAttribute">
            <summary>
            Attribute applied to properties and constructor parameters, to describe when the dependency
            injection system should inject an object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ParameterAttribute">
            <summary>
            Indicates dependency injection members, whose value at 
            build time will be determined by the <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> returned 
            from the attribute <see cref="M:Microsoft.Practices.ObjectBuilder2.ParameterAttribute.CreateParameter(System.Type)"/> factory method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ParameterAttribute.CreateParameter(System.Type)">
            <summary>
            Creates a parameter for use with various <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> implementations 
            that can process <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/>s.
            </summary>
            <param name="annotatedMemberType">The type of the annotated member, such as a property or a 
            constructor parameter.</param>
            <returns>The parameter instance that knows how to retrieve a value for the dependency.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyAttribute"/> class with a null build key.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyAttribute"/> class with a build key.
            </summary>
            <param name="buildKey">The key of the object to build.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyAttribute.CreateParameter(System.Type)">
            <summary>
            Creates a parameter for use with various <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> implementations 
            that can process <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/>s.
            </summary>
            <param name="annotatedMemberType">The type of the annotated member, such as a property or a 
            constructor parameter.</param>
            <returns>The parameter instance that knows how to retrieve a value for the dependency.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.DependencyAttribute.BuildKey">
            <summary>
            Gets the key of the object to be built.
            </summary>
            <value>
            The key of the object to be built.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.DependencyAttribute.NotPresentBehavior">
            <summary>
            Gets or sets the behaviour when the dependecy can't be found.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DependencyParameter">
            <summary>
            Parameter that performs value retrieval depending on dependency injection attributes.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IParameter">
            <summary>
            Represents a single parameter used for constructor and method calls, and
            property setting.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IParameter.GetParameterType(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Gets the type of the parameter value.
            </summary>
            <param name="context">The build context.</param>
            <returns>The parameter's type.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IParameter.GetValue(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Gets the parameter value.
            </summary>
            <param name="context">The build context.</param>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyParameter.#ctor(System.Object,Microsoft.Practices.ObjectBuilder2.NotPresentBehavior)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyParameter"/> class with a build key and behavior.
            </summary>
            <param name="buildKey">The key of the object begin built.</param>
            <param name="notPresentBehavior">One of the <see cref="P:Microsoft.Practices.ObjectBuilder2.DependencyParameter.NotPresentBehavior"/> values.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyParameter.GetParameterType(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Gets the type of the parameter value.
            </summary>
            <param name="context">The build context.</param>
            <returns>The parameter's type.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyParameter.GetValue(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Gets the parameter value.
            </summary>
            <param name="context">The build context.</param>
            <returns>The parameter's value.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.DependencyParameter.BuildKey">
            <summary>
            Gets the key for the object being built.
            </summary>
            <value>
            The key for the object being built.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.DependencyParameter.NotPresentBehavior">
            <summary>
            Gets the behaviour for missing dependencies.
            </summary>
            <value>
            One of the <see cref="P:Microsoft.Practices.ObjectBuilder2.DependencyParameter.NotPresentBehavior"/> values.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.KnownTypeParameter">
            <summary>
            An implementation helper class for <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> which can be used
            when you know the type of the parameter value ahead of time.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.KnownTypeParameter.type">
            <summary>
            The parameter type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.KnownTypeParameter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.KnownTypeParameter"/> class
            using the given type.
            </summary>
            <param name="type">The parameter type.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.KnownTypeParameter.GetParameterType(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Gets the type of the parameter value.
            </summary>
            <param name="context">The build context.</param>
            <returns>The parameter's type.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.KnownTypeParameter.GetValue(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Gets the parameter value.
            </summary>
            <param name="context">The build context.</param>
            <returns>The parameter's value.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.LookupParameter">
            <summary>
            Looks up the parameter value in the build context locator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LookupParameter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.LookupParameter"/> class.
            </summary>
            <param name="key">The key to look the object up with.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LookupParameter.GetParameterType(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Gets the type of the parameter value.
            </summary>
            <param name="context">The build context.</param>
            <returns>The parameter's type.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LookupParameter.GetValue(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Gets the parameter value.
            </summary>
            <param name="context">The build context.</param>
            <returns>The parameter's value.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ValueParameter`1">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IParameter"/> which directly holds a value to
            be used for the parameter.
            </summary>
            <typeparam name="TValue">The type of the parameter value.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ValueParameter`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ValueParameter`1"/> class.
            </summary>
            <param name="value">The value for the parameter.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ValueParameter`1.GetValue(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Gets the parameter value.
            </summary>
            <param name="context">The build context.</param>
            <returns>The parameter's value.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ValueParameter">
            <summary>
            Represents a parameter which directly holds a value to
            be used for the parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ValueParameter.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ValueParameter"/> class.
            </summary>
            <param name="valueType">The type of the parameter value.</param>
            <param name="value">The value for the parameter.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ValueParameter.GetValue(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Gets the parameter value.
            </summary>
            <param name="context">The build context.</param>
            <returns>The parameter's value.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IPropertySetterInfo">
            <summary>
            Encapsulates a property setter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPropertySetterInfo.Set(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object,System.Object)">
            <summary>
            Sets the value on the property.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>.</param>
            <param name="instance">The instance to use to execute the method.</param>
            <param name="buildKey">The key for the object being built.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IPropertySetterPolicy">
            <summary>
            Represents a policy for <see cref="T:Microsoft.Practices.ObjectBuilder2.PropertySetterStrategy"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IPropertySetterPolicy.Properties">
            <summary>
            Gets a collection of properties to be called on the object instance.
            </summary>
            <value>
            A collection of properties to be called on the object instance.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.NamedPropertySetterInfo">
            <summary>
            Encapsulates a call to a named property.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedPropertySetterInfo.#ctor(System.String,Microsoft.Practices.ObjectBuilder2.IParameter)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedPropertySetterInfo"/> class with the property name and the parameter value.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="value">The paramer value.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedPropertySetterInfo.Set(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object,System.Object)">
            <summary>
            Sets the value on the property.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>.</param>
            <param name="instance">The instance to use to execute the method.</param>
            <param name="buildKey">The key for the object being built.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PropertyMemberInfo">
            <summary>
            Represents the member inforamation for a <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertyMemberInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.PropertyMemberInfo"/> class with a <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="prop">The <see cref="T:System.Reflection.PropertyInfo"/> to initialize the class.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertyMemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes for the property.
            </summary>
            <param name="attributeType">The <see cref="T:System.Type"/> of the attributes to get from the property.</param>
            <param name="inherit">true to get inherited attrubutes; otherwise, false.</param>
            <returns>An array of the custom attributes.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertyMemberInfo.GetParameters">
            <summary>
            The parameters for the property.
            </summary>
            <returns>An array of <see cref="T:System.Reflection.ParameterInfo"/> objects.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.PropertyMemberInfo.MemberInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <value>
            The <see cref="T:System.Reflection.PropertyInfo"/>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.PropertyMemberInfo.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the poperty.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PropertyReflectionStrategy`1">
            <summary>
            Strategy that performs injection of method policies.
            </summary>
            <typeparam name="TDefaultParameterAttribute">The <see cref="T:System.Type"/> of attribute to look for in the property.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertyReflectionStrategy`1.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IMemberInfo{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder2.IParameter})">
            <summary>
            Adds <paramref name="parameters"/> to the appropriate policy.
            </summary>
            <param name="context">The build context.</param>
            <param name="member">The member that's being reflected over.</param>
            <param name="parameters">The parameters used to satisfy the method.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertyReflectionStrategy`1.GetMembers(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Retrieves the list of properties to iterate looking for injection attributes.
            </summary>
            <param name="context">The build context.</param>
            <returns>
            An enumerable wrapper around the <see cref="T:Microsoft.Practices.ObjectBuilder2.IMemberInfo`1"/> interfaces that
            represent the members to be inspected for reflection.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertyReflectionStrategy`1.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder2.IMemberInfo{System.Reflection.PropertyInfo})">
            <summary>
            Determine whether a member should be processed. 
            </summary>
            <param name="member">The member to determine processing.</param>
            <returns>true if the member needs processing; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PropertySetterPolicy">
            <summary>
            Represents a policy for <see cref="T:Microsoft.Practices.ObjectBuilder2.PropertySetterStrategy"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.PropertySetterPolicy.Properties">
            <summary>
            Gets a collection of properties to be called on the object instance.
            </summary>
            <value>
            A collection of properties to be called on the object instance.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PropertySetterStrategy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> which sets property values.
            </summary>
            <remarks>
            This strategy looks for policies in the context registered under the interface type
            <see cref="T:Microsoft.Practices.ObjectBuilder2.IPropertySetterPolicy"/>, and sets the property values. If no policy is
            found, the no property values are set.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertySetterStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.  Looks for the <see cref="T:Microsoft.Practices.ObjectBuilder2.IPropertySetterPolicy"/> and
            sets the value for the property if found.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ReflectionPropertySetterInfo">
            <summary>
            Encapsulates a reflection property setting.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReflectionPropertySetterInfo.#ctor(System.Reflection.PropertyInfo,Microsoft.Practices.ObjectBuilder2.IParameter)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ReflectionPropertySetterInfo"/> class with a property and paramter value.
            </summary>
            <param name="property">The property to use to set the value.</param>
            <param name="value">The value for the property.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ReflectionPropertySetterInfo.Set(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object,System.Object)">
            <summary>
            Sets the value on the property.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>.</param>
            <param name="instance">The instance to use to execute the method.</param>
            <param name="buildKey">The key for the object being built.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReflectionPropertySetterInfo.Property">
            <summary>
            Gets the property for the setter call.
            </summary>
            <value>
            The property for the setter call.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ReflectionPropertySetterInfo.Value">
            <summary>
            Gets the value for the property.
            </summary>
            <value>
            The value for the property.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ISingletonPolicy">
            <summary>
            Represents a policy for <see cref="T:Microsoft.Practices.ObjectBuilder2.SingletonStrategy"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ISingletonPolicy.IsSingleton">
            <summary>
            Determines if the object should be a singleton.
            </summary>
            <value>
            true if the object should be a singleton; otherwise, false.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SingletonPolicy">
            <summary>
            Represents a policy for <see cref="T:Microsoft.Practices.ObjectBuilder2.SingletonStrategy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SingletonPolicy.#ctor(System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.SingletonPolicy"/> class with a 
            value determiniting if the the object should be singleton or not.
            </summary>
            <param name="isSingleton">true if the object should be a singleton; otherwise, false.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SingletonPolicy.IsSingleton">
            <summary>
            Determines if the object should be a singleton.
            </summary>
            <value>
            true if the object should be a singleton; otherwise, false.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SingletonStrategy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> which allows objects to be
            singletons.
            </summary>
            <remarks>
            This strategy looks for policies in the context registered under the interface type
            <see cref="T:Microsoft.Practices.ObjectBuilder2.ISingletonPolicy"/>. It uses the locator in the build context to rememeber
            singleton objects, and the lifetime container contained in the locator to ensure they
            are not garbage collected. Upon the second request for an object, it will short-circuit
            the strategy chain and return the singleton instance (and will not re-inject the
            object).
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SingletonStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SingletonStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1">
            <summary>
            Represents a chain of responsibility for builder strategies partitioned by stages.
            </summary>
            <typeparam name="TStageEnum">The stage enumeration to partition the strategies.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.#ctor(Microsoft.Practices.ObjectBuilder2.StagedStrategyChain{`0})">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> class with an inner strategy chain to use when building.
            </summary>
            <param name="innerChain">The inner strategy chain to use first when finding strategies in the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.Add(Microsoft.Practices.ObjectBuilder2.IBuilderStrategy,`0)">
            <summary>
            Adds a strategy to the chain at a particular stage.
            </summary>
            <param name="strategy">The strategy to add to the chain.</param>
            <param name="stage">The stage to add the strategy.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.AddNew``1(`0)">
            <summary>
            Add a new strategy for the <paramref name="stage"/>.
            </summary>
            <typeparam name="TStrategy">The <see cref="T:System.Type"/> of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/></typeparam>
            <param name="stage">The stage to add the strategy.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.Clear">
            <summary>
            Clear the current strategy chain list.
            </summary>
            <remarks>
            This will not clear the inner strategy chain if this instane was created with one.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.MakeStrategyChain">
            <summary>
            Makes a strategy chain based on this instance.
            </summary>
            <returns>A new <see cref="T:Microsoft.Practices.ObjectBuilder2.StrategyChain"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.StrategyChain">
            <summary>
            Represents a chain of responsibility for builder strategies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.#ctor">
            <summary>
            Initialzie a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.StrategyChain"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initialzie a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.StrategyChain"/> class with a colleciton of strategies.
            </summary>
            <param name="strategies">A collection of strategies to initialize the chain.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.Add(Microsoft.Practices.ObjectBuilder2.IBuilderStrategy)">
            <summary>
            Adds a strategy to the chain.
            </summary>
            <param name="strategy">The strategy to add to the chain.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds strategies to the chain.
            </summary>
            <param name="strategyEnumerable">The strategies to add to the chain.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.Reverse">
            <summary>
            Reverse the order of the strategy chain.
            </summary>
            <returns>The reversed strategy chain.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context to build up.
            </summary>
            <param name="context">Context for the build processes.</param>
            <returns>The build up object</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context,
            calling the TearDown methods on the strategies.
            </summary>
            <param name="context">Context for the teardown process.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.System#Collections#Generic#IEnumerable{Microsoft#Practices#ObjectBuilder2#IBuilderStrategy}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuildKey">
            <summary>
            Utility methods for dealing with arbitrary build key objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildKey.GetType(System.Object)">
            <summary>
            Gets the <see cref="T:System.Type"/> of object to build from the build key.
            </summary>
            <param name="buildKey">The build key to get the <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:System.Type"/> of object to build from the key.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildKey.TryGetType(System.Object,System.Type@)">
            <summary>
            Tries to get the <see cref="T:System.Type"/> from <paramref name="buildKey"/>.
            </summary>
            <param name="buildKey">The build key to get the <see cref="T:System.Type"/>.</param>
            <param name="type"></param>
            <returns>true if the <see cref="T:System.Type"/> was found; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildKey.ReplaceType(System.Object,System.Type)">
            <summary>
            Given a <paramref name="buildKey"/>, return a new build key
            which is the same as the original, except that the type has
            been replaced with <paramref name="newType"/>.
            </summary>
            <param name="buildKey">original build key</param>
            <param name="newType">New type to put in new build key.</param>
            <returns>The new build key.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DependencyResolver">
            <summary>
            Dependency resolver for resolving dependencies of objects being built.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolver.Resolve(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object,Microsoft.Practices.ObjectBuilder2.NotPresentBehavior)">
            <summary>
            Resolves a dependency.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> of the build operation.</param>
            <param name="buildKey">The key for the object being built.</param>
            <param name="behavior">Describes how to behave if the dependency is not found.</param>
            <returns>The dependent object. If the object is not found, and notPresent
            is set to <see cref="F:Microsoft.Practices.ObjectBuilder2.NotPresentBehavior.Null"/>, will return null.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.Guard">
            <summary>
            Represents a simple class for validating parameters and throwing exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Validates <paramref name="argumentValue"/> is not null and throws <see cref="T:System.ArgumentNullException"/> if it is null.
            </summary>
            <param name="argumentValue">The value to validate.</param>
            <param name="argumentName">The name of <paramref name="argumentValue"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Guard.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Validates <paramref name="argumentValue"/> is not null or an empty string and throws <see cref="T:System.ArgumentNullException"/> if it is null or an empty string .
            </summary>
            <param name="argumentValue">The value to validate.</param>
            <param name="argumentName">The name of <paramref name="argumentValue"/>.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.WeakRefDictionary`2">
            <summary>
            Represents a dictionary which stores the values as weak references instead of strong
            references. Null values are supported.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.WeakRefDictionary`2.Add(`0,`1)">
            <summary>
            Gets the count of the number of items in the dictionary.
            </summary>
            <value>
            The count of the number of items in the dictionary.
            </value>
            <remarks>
            Since the items in the dictionary are held by weak reference, the count value
            cannot be relied upon to guarantee the number of objects that would be discovered via
            enumeration. Treat the Count as an estimate only.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.WeakRefDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if the dictionary contains a value for the key.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>true if the key is contained in the dictionary; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.WeakRefDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the dictionary. 
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.WeakRefDictionary`2.Remove(`0)">
            <summary>
            Removes an item from the dictionary.
            </summary>
            <param name="key">The key of the item to be removed.</param>
            <returns>Returns true if the key was in the dictionary; return false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.WeakRefDictionary`2.TryGet(`0,`1@)">
            <summary>
            Attempts to get a value from the dictionary.
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
            <returns>Returns true if the value was present; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.WeakRefDictionary`2.Count">
            <summary>
            Returns a count of the number of items in the dictionary.
            </summary>
            <remarks>
            Since the items in the dictionary are held by weak reference, the count value
            cannot be relied upon to guarantee the number of objects that would be discovered via
            enumeration. Treat the Count as an estimate only.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.WeakRefDictionary`2.Item(`0)">
            <summary>
            Retrieves a value from the dictionary.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The value in the dictionary.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the key does exist in the dictionary.
            Since the dictionary contains weak references, the key may have been removed by the
            garbage collection of the object.</exception>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException">
            <summary>
            The exception thrown when injection is attempted on a method
            that is an open generic or has out or ref params.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException"/> with no
            message.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException"/> with the given message
            </summary>
            <param name="message">Message to return.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a <see cref="T:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException"/> with the given message
            and inner exception.
            </summary>
            <param name="message">Message to return.</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used for serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey">
            <summary>
            Build key used to combine a type object with a string name. Used by
            ObjectBuilder to indicate exactly what is being built.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.#ctor(System.Type,System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance with the given
            type and name.
            </summary>
            <param name="type"><see cref="P:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type"/> to build.</param>
            <param name="name">Key to use to look up type mappings and singletons.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance for the default
            buildup of the given type.
            </summary>
            <param name="type"><see cref="P:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type"/> to build.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Make``1">
            <summary>
            This helper method creates a new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance. It is
            initialized for the default key for the given type.
            </summary>
            <typeparam name="T">Type to build.</typeparam>
            <returns>A new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Make``1(System.String)">
            <summary>
            This helper method creates a new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance for
            the given type and key.
            </summary>
            <typeparam name="T">Type to build</typeparam>
            <param name="name">Key to use to look up type mappings and singletons.</param>
            <returns>A new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance initialized with the given type and name.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.ReplaceType(System.Type)">
            <summary>
            Construct a new build key object with the current type
            replaced with the specified <paramref name="newType"/>.
            </summary>
            <remarks>This method creates a new build key object, the original is unchanged.</remarks>
            <param name="newType">New type to place in the build key.</param>
            <returns>The new build key.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances.
            </summary>
            <remarks>Two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type. Also, comparing
            against a different type will also return false.</remarks>
            <param name="obj">Object to compare to.</param>
            <returns>True if the two keys are equal, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.GetHashCode">
            <summary>
            Calculate a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.op_Equality(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Compare two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances for equality.
            </summary>
            <remarks>Two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type.</remarks>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>True if the values of the keys are the same, else false.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.op_Inequality(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Compare two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances for inequality.
            </summary>
            <remarks>Two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type. If either field differs
            the keys are not equal.</remarks>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>false if the values of the keys are the same, else true.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.ToString">
            <summary>
            Formats the build key as a string (primarily for debugging).
            </summary>
            <returns>A readable string representation of the build key.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type">
            <summary>
            Return the <see cref="P:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type"/> stored in this build key.
            </summary>
            <value>The type to build.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Name">
            <summary>
            Returns the name stored in this build key.
            </summary>
            <remarks>The name to use when building.</remarks>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.NotPresentBehavior">
            <summary>
            Enumeration describing how to handle when a dependency is not present.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.NotPresentBehavior.Build">
            <summary>
            Create the object.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.NotPresentBehavior.Null">
            <summary>
            Return null. Do not build the object.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.NotPresentBehavior.Throw">
            <summary>
            Throw a dependency missing exception.
            </summary>
        </member>
    </members>
</doc>
