<?xml version="1.0" encoding="utf-8" ?>

<!--

 *   This file is part of compile-time components of PostSharp.                *
 *                                                                             *
 *   This library is free software: you can redistribute it and/or modify      *
 *   it under the terms of the version 3 of the GNU General Public License     *
 *   as published by the Free Software Foundation.                             *
 *                                                                             *
 *   This library is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this library.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *

-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Users may install an override file on their machine. Properties set in this file
       will take precedence on the default values. -->
  <Import Project="PostSharp-1.5.Override.targets" Condition="Exists('PostSharp-1.5.Override.targets')"/>


	<PropertyGroup>
    <_PostSharp15ImportedTwice Condition="'$(PostSharp15Imported)'=='True'">True</_PostSharp15ImportedTwice>
    <PostSharp15Imported>True</PostSharp15Imported>

	<!-- Determines whether a PostSharp project is named after the principal project. -->
    <PostSharp15Project Condition=" '$(PostSharp15Project)'=='' AND Exists('$(MSBuildProjectDirectory)\$(MSBuildProjectName).$(Configuration).$(Platform).psproj') ">$(MSBuildProjectDirectory)\$(MSBuildProjectName).$(Configuration).$(Platform).psproj</PostSharp15Project>
    <PostSharp15Project Condition=" '$(PostSharp15Project)'=='' AND Exists('$(MSBuildProjectDirectory)\$(MSBuildProjectName).$(Configuration).psproj') ">$(MSBuildProjectDirectory)\$(MSBuildProjectName).$(Configuration).psproj</PostSharp15Project>
    <PostSharp15Project Condition=" '$(PostSharp15Project)'=='' AND Exists('$(MSBuildProjectDirectory)\$(MSBuildProjectName).psproj') ">$(MSBuildProjectDirectory)\$(MSBuildProjectName).psproj</PostSharp15Project>

    <!-- PostSharp properties -->
		<PostSharpAutoUpdateDisable Condition="$(PostSharpAutoUpdateDisable)==''">False</PostSharpAutoUpdateDisable>
		<PostSharpConfiguration Condition="'$(PostSharpConfiguration)'==''">$(Configuration)</PostSharpConfiguration>
		<PostSharpPlatform Condition="'$(PostSharpPlatform)'==''">$(Platform)</PostSharpPlatform>
		<PostSharpIntermediateDirectory Condition="'$(PostSharpIntermediateDirectory)'==''">$(IntermediateOutputPath)PostSharp</PostSharpIntermediateDirectory>
    <PostSharpBackupDirectory Condition="'$(PostSharpBackupDirectory)'==''">$(IntermediateOutputPath)Before-PostSharp</PostSharpBackupDirectory>
		<PostSharpCleanIntermediate Condition="'$(PostSharpCleanIntermediate)'==''">False</PostSharpCleanIntermediate>
    <PostSharpSignAssembly Condition="'$(PostSharpSignAssembly)'=='' AND '$(SignAssembly)'!=''">$(SignAssembly)</PostSharpSignAssembly>
    <PostSharpSignAssembly Condition="'$(PostSharpSignAssembly)'==''">False</PostSharpSignAssembly>
    <PostSharpAttachDebugger Condition="'$(PostSharpAttachDebugger)'==''">False</PostSharpAttachDebugger>
    <PostSharpUseCommandLine Condition="'$(PostSharpUseCommandLine)'==''">False</PostSharpUseCommandLine>
    <PostSharpVerbose Condition="'$(PostSharpVerbose)'==''">False</PostSharpVerbose>
    <_PostSharpVerboseCmdLine Condition="'$(PostSharpVerbose)'=='true'">/v</_PostSharpVerboseCmdLine>
    <_PostSharpAttachDebuggerCmdLine Condition="'$(PostSharpAttachDebugger)'=='True' Or '$(PostSharpAttachDebugger)'=='true'">/Attach</_PostSharpAttachDebuggerCmdLine>
  </PropertyGroup>

  <!-- Import tasks -->
  <UsingTask	AssemblyFile="PostSharp.MSBuild.dll"
				TaskName="PostSharp.MSBuild.PostSharp15" />

  <UsingTask	AssemblyFile="PostSharp.MSBuild.dll"
				TaskName="PostSharp.MSBuild.PostSharp15TouchWithDelay"
				/>

  <UsingTask	AssemblyFile="PostSharp.MSBuild.dll"
         TaskName="PostSharp.MSBuild.PostSharp15CheckPfx"
         />

  <UsingTask	AssemblyFile="PostSharp.MSBuild.dll"
       TaskName="PostSharp.MSBuild.PostSharp15Sign"
       />

  <UsingTask	AssemblyFile="PostSharp.MSBuild.dll"
      TaskName="PostSharp.MSBuild.PostSharp15GetCurrentProjectDirectory"/>

  <UsingTask	AssemblyFile="PostSharp.MSBuild.dll"
      TaskName="PostSharp.MSBuild.PostSharp15MoveWithRetry"/>


  <Target Name="PostSharp15GetDirectory">
    <PostSharp15GetCurrentProjectDirectory>
      <Output TaskParameter="Directory" PropertyName="_PostSharp15Directory"/>
    </PostSharp15GetCurrentProjectDirectory>
  </Target>

  <!-- Inspect project references for PostSharp.Public.dll -->
  <Target Name="PostSharp15InspectReferences"
			Condition="'$(BuildingProject)'=='true' And '$(SkipPostSharp)'!='True' And '$(PostSharp15Project)'=='' "
			DependsOnTargets="ResolveAssemblyReferences;PostSharp15InspectConstants;PostSharp15GetDirectory">

    <Message Text="PostSharp parses the following references: @(ReferencePath -> '%(Filename)')."
		    Importance="low"/>
    
    <!-- Check that all references have strict version -->
    <Warning Text="For side-by-side compatibility, the reference to assembly PostSharp.Public should be version-specific."  
           Condition="'%(ReferencePath.FileName)'=='PostSharp.Public' AND
                      '%(ReferencePath.SpecificVersion)'=='False'" />
      
    <!-- Inspect direct references -->
    <CreateProperty Condition="
                    ('%(ReferencePath.FusionName)'=='PostSharp.Public, Version=1.5.0.0, Culture=neutral, PublicKeyToken=b13fd38b8f9c99d7' OR
                    '%(ReferencePath.FusionName)'=='PostSharp.Public.CF, Version=1.5.0.0, Culture=neutral, PublicKeyToken=b13fd38b8f9c99d7' OR
                    '%(ReferencePath.FusionName)'=='PostSharp.Public.SL, Version=1.5.0.0, Culture=neutral, PublicKeyToken=b13fd38b8f9c99d7')
                    " Value="%(ReferencePath.FileName)">
      <Output TaskParameter="Value" PropertyName="PostSharp15Reference" />
    </CreateProperty>

    <!-- Inspect indirect references -->
    <CreateProperty Condition="'$(PostSharp15Reference)'=='' AND 
                    ( '%(ReferenceDependencyPaths.FusionName)'=='PostSharp.Public, Version=1.5.0.0, Culture=neutral, PublicKeyToken=b13fd38b8f9c99d7' OR
                      '%(ReferenceDependencyPaths.FusionName)'=='PostSharp.Public.CF, Version=1.5.0.0, Culture=neutral, PublicKeyToken=b13fd38b8f9c99d7' OR
                      '%(ReferenceDependencyPaths.FusionName)'=='PostSharp.Public.SL, Version=1.5.0.0, Culture=neutral, PublicKeyToken=b13fd38b8f9c99d7' )" 
                    Value="%(ReferenceDependencyPaths.FileName)">
      <Output TaskParameter="Value" PropertyName="PostSharp15Reference" />
    </CreateProperty>


    <Message Text="Detected reference to '$(PostSharp15Reference)'." Condition="'$(PostSharp15Reference)'!=''" />

    <CreateProperty Condition="'$(PostSharp15Reference)'!=''" Value="$(_PostSharp15Directory)\Default.psproj">
      <Output TaskParameter="Value" PropertyName="PostSharp15Project" />
    </CreateProperty>

  </Target>

  <!-- Determines whether the SkipPostSharp or PostSharpVerify constant has been defined -->
  <Target Name="PostSharp15InspectConstants"
			Condition="'$(BuildingProject)'=='true' And '$(SkipPostSharp)'!='True'">

    <CreateItem Include="$(DefineConstants)">
      <Output TaskParameter="Include" ItemName="_DefineConstants"/>
    </CreateItem>

    <CreateProperty Condition="'%(_DefineConstants.Identity)'=='SkipPostSharp' AND '$(SkipPostSharp)'==''" Value="True">
      <Output TaskParameter="Value" PropertyName="SkipPostSharp" />
    </CreateProperty>

    <Message	Condition="'$(SkipPostSharp)'=='True'"
					Importance="low"
					Text="SkipPostSharp constant detected. The PostSharp target will be ignored." />

    <CreateProperty Condition="'%(_DefineConstants.Identity)'=='PostSharpVerify'" Value="True">
      <Output TaskParameter="Value" PropertyName="PostSharpVerify" />
    </CreateProperty>

  </Target>


  <!-- Define compiler constants if PostSharp has been detected. -->
  <Target Name="PostSharp15DefineConstant" DependsOnTargets="PostSharp15InspectConstants;PostSharp15InspectReferences"
          Condition="'$(BuildingProject)'=='true' AND '$(PostSharp15Project)'!='' AND '$(SkipPostSharp)'==''">
    <CreateProperty Value="POSTSHARP;$(DefineConstants)" Condition="'$(Language)'=='C#'">
      <Output TaskParameter="Value" PropertyName="DefineConstants"/>
    </CreateProperty>
    <CreateProperty Value="POSTSHARP=150,$(FinalDefineConstants)" Condition="'$(Language)'=='VB'">
      <Output TaskParameter="Value" PropertyName="FinalDefineConstants"/>
    </CreateProperty>
  </Target>


  <!-- Task PostSharp: executes PostSharp if the PostSharp15Project is defined. -->
  <Target	Name="PostSharp15"
			Condition="'$(BuildingProject)'=='true' AND '$(PostSharp15Project)'!='' AND '$(SkipPostSharp)'==''"
			Inputs="$(PostSharp15Project);@(IntermediateAssembly->'%(FullPath)')"
			Outputs="@(IntermediateAssembly->'%(FullPath).postsharp')"
			DependsOnTargets="_CopyFilesMarkedCopyLocal;ResolveKeySource;PostSharp15GetDirectory">

    <!-- Check that PostSharp targets have not been imported twice. -->
    <Error Text="PostSharp targets have been imported twice in the project. Be sure to set the 'DontImportPostSharp' property to 'True' when you import PostSharp manually, so that it does not get imported automatically."
           Condition="'$(_PostSharp15ImportedTwice)'=='True'"/>
    
    <!-- Check whether we should run with reflection disabled-->
    <CreateProperty Condition="    '$(PostSharpDisableReflection)'=='' 
                               AND (    '$(CreateSilverlightAppManifestDependsOn)'!=''
                                     OR '$(CustomAfterMicrosoftCompactFrameworkCommonTargets)'!='' )" Value="True">
      <Output TaskParameter="Value" PropertyName="PostSharpDisableReflection"/>
    </CreateProperty>
    <CreateProperty Condition="    '$(PostSharpDisableReflection)'=='' " Value="False">
      <Output TaskParameter="Value" PropertyName="PostSharpDisableReflection"/>
    </CreateProperty>


    <CreateProperty Condition="'$(PostSharpDisableReflection)'=='True'" Value="/noreflection">
      <Output TaskParameter="Value" PropertyName="_PostSharpDisableReflectionCmdLine"/>
    </CreateProperty>

    <CreateProperty Condition="'$(PostSharpDisableReflection)'==''" Value="False">
      <Output TaskParameter="Value" PropertyName="PostSharpDisableReflection"/>
    </CreateProperty>

    <!-- Move the old intermediate files -->
    <MakeDir Directories="$(PostSharpBackupDirectory)"/>

    <CreateProperty Value="@(IntermediateAssembly->'$(PostSharpBackupDirectory)\%(Filename)%(Extension)')">
      <Output TaskParameter="Value" PropertyName="_PostSharpInputBin"/>
    </CreateProperty>
    <CreateProperty Value="@(IntermediateAssembly->'$(PostSharpBackupDirectory)\%(Filename).pdb')">
      <Output TaskParameter="Value" PropertyName="_PostSharpInputPdb"/>
    </CreateProperty>

    <PostSharp15MoveWithRetry Source="@(IntermediateAssembly->'%(FullPath)')" Destination="$(_PostSharpInputBin)" />
    <PostSharp15MoveWithRetry Source="@(IntermediateAssembly->'%(RelativeDir)%(Filename).pdb')" Destination="$(_PostSharpInputPdb)"
          Condition="Exists('@(IntermediateAssembly->'%(RelativeDir)%(Filename).pdb')')"/>

    <!-- Redefine the property where FxCop expects the location of the source file. -->
    <CreateProperty Value="$(_PostSharpInputBin)">
      <Output TaskParameter="Value" PropertyName="CodeAnalysisInputAssemblyForTask"/>
    </CreateProperty>



    <!-- If the private key is a PFX, we extract the public key into an SNK file,
         because ILASM does not support PFX. ILASM will delay-sign the assembly
         using the SNK, and we will resign it after. -->
    <PostSharp15CheckPfx KeyFile="$(AssemblyOriginatorKeyFile)"
                      Condition="'$(SignAssembly)' == 'true' And '$(AssemblyOriginatorKeyFile)' != ''">
      <Output TaskParameter="PostSharpKeyFile" PropertyName="_PostSharpKeyFile"/>
      <Output TaskParameter="SignAfterPostSharp" PropertyName="_SignAfterPostSharp"/>
    </PostSharp15CheckPfx>


    <!-- Prepare parameters sent to PostSharp -->


    <CreateItem Include="$(ReferencePath);$(PostSharpSearchPath)">
      <Output TaskParameter="Include" ItemName="_ReferencePathAsItem"/>
    </CreateItem>

    <CreateProperty Value="@(_ReferencePathAsItem->'%(FullPath)', ',')">
      <Output TaskParameter="Value" PropertyName="_ReferencePathAsCommaSeparatedList"/>
    </CreateProperty>

    <CreateProperty Value="@(_ResolveAssemblyReferenceResolvedFiles->'%(FullPath)', ',')">
      <Output TaskParameter="Value" PropertyName="_ResolveAssemblyReferenceResolvedFilesAbsoluteAsCommaSeparatedList" />
    </CreateProperty>

    <CreateProperty Value="@(IntermediateAssembly->'%(FullPath)',',')">
      <Output TaskParameter="Value" PropertyName="_PostSharpOutput"/>
    </CreateProperty>

    
    <!-- Convert PostSharp parameters into an item group so that we can better format them. -->
    <CreateItem Include="
              Output=$(_PostSharpOutput);
              ReferenceDirectory=$(MSBuildProjectDirectory);
							Configuration=$(PostSharpConfiguration);
							Platform=$(PostSharpPlatform);
							SearchPath=$(OutDir),$(IntermediateOutputPath),$(_ReferencePathAsCommaSeparatedList);
							IntermediateDirectory=$(PostSharpIntermediateDirectory);
							CleanIntermediate=$(PostSharpCleanIntermediate);
							MSBuildProjectFullPath=$(MSBuildProjectFullPath);
							SignAssembly=$(PostSharpSignAssembly);
							PrivateKeyLocation=$(_PostSharpKeyFile);
              ResolvedReferences=$(_ResolveAssemblyReferenceResolvedFilesAbsoluteAsCommaSeparatedList);
							$(PostSharpParameters)">
      <Output TaskParameter="Include" ItemName="_PostSharpParameters"/>
    </CreateItem>

    <!-- Create our working directory. -->
    <MakeDir Directories="$(PostSharpIntermediateDirectory)"/>

    <!-- Execute PostSharp. We support both in-process MSBuild task and standalone command line utility. -->
    <Message Text="Passing parameters: @(_PostSharpParameters)" Importance="low"/>

    <PostSharp15	Project="$(PostSharp15Project)"
					      Input="$(_PostSharpInputBin)"
					      AutoUpdateDisabled="$(PostSharpAutoUpdateDisable)"
					      Parameters="@(_PostSharpParameters)"
					      Condition="'$(PostSharpUseCommandLine)'!='True'"
                AttachDebugger="$(PostSharpAttachDebugger)"
                Verbose="$(PostSharpVerbose)"
                  DisableReflection="$(PostSharpDisableReflection)"
					/>

    <Exec Condition="'$(PostSharpUseCommandLine)'=='True'"
          IgnoreExitCode="true"
			    Command="&quot;$(_PostSharp15Directory)\PostSharp.exe&quot; $(_PostSharpAttachDebuggerCmdLine) $(_PostSharpVerboseCmdLine) $(_PostSharpDisableReflectionCmdLine) &quot;$(PostSharp15Project)&quot; &quot;$(_PostSharpInputBin)&quot; @(_PostSharpParameters->'&quot;/P:%(Identity) &quot;', ' ' )">
      <Output TaskParameter="ExitCode" PropertyName="_PostSharpExitCode"/>
    </Exec>

    <Error Text="The PostSharp build step failed (exit code $(_PostSharpExitCode)). See previous errors or the Build Output window for details."
           Condition="'$(PostSharpUseCommandLine)'=='True' And '$(_PostSharpExitCode)'!='0'"/>
    
    <!-- Resign the assembly if neccesary -->
    <PostSharp15Sign Assembly="@(IntermediateAssembly)"
              KeyFile="$(AssemblyOriginatorKeyFile)"
              Condition="'$(_SignAfterPostSharp)'=='True'"/> 
    

		<!-- Touch the semaphore file to enable incremental building (with a delay of 1 s
		     to avoid to post-compile the result of post-compilation during incremental rebuild   -->
    <PostSharp15TouchWithDelay Files="@(IntermediateAssembly->'%(FullPath).postsharp')"
						ReferenceFile="@(IntermediateAssembly)"
						Delay="100"/>
    
    <!-- Finally create a property to remember we are done. -->
    <CreateProperty Value="True">
      <Output TaskParameter="Value" PropertyName="PostSharp15Completed" />
    </CreateProperty>

    
	</Target>

	<Target Name="PostSharp15Verify" DependsOnTargets="GetFrameworkPaths" 
          Condition="'$(PostSharpVerify)'!='' And '$(_PostSharpOutput)'!=''">
		<Exec Command="&quot;$(FrameworkSDKDir)bin\peverify&quot; &quot;$(OutDir)$(TargetFileName)&quot; /nologo /verbose"
          Condition="'$(FrameworkSDKDir)'!=''"/>
    <Warning Text="PostSharp could not be verified because the .NET Framework SDK is not installed."
             Condition="'$(FrameworkSDKDir)'==''"/>
	 </Target>

	<!-- Introduces PostSharp in the chain of compilation targets -->
	<PropertyGroup>
		<CompileDependsOn>
			PostSharp15InspectConstants;
			PostSharp15InspectReferences;
      PostSharp15DefineConstant;
      $(CompileDependsOn);
			PostSharp15
		</CompileDependsOn>
		<BuildDependsOn>
			$(BuildDependsOn);
			PostSharp15Verify
		</BuildDependsOn>
   </PropertyGroup>

  <!-- If we have code analysis, we have to change the PrepareForRun chain so that
       we copy output files to the backup directory before code analysis runs. -->
  <PropertyGroup Condition="'$(RunCodeAnalysis)'=='true' or '$(RunCodeAnalysisOnce)'=='true' AND '$(CodeAnalysisTargets)'!='' AND Exists('$(CodeAnalysisTargets)')">
    <PrepareForRunDependsOn>$(PrepareForRunDependsOn);PostSharp15CopyOutputToCodeAnalysis;RunCodeAnalysis</PrepareForRunDependsOn>
  </PropertyGroup>

  <Target Name="PostSharp15CopyOutputToCodeAnalysis" DependsOnTargets="CopyFilesToOutputDirectory" Condition="'$(PostSharp15Completed)'=='True'">
    
    <!-- We copy all files from the output directory to the backup directory, 
         expected the output assembly and pdb themselves (and xml serializers, since they could be invalid) -->
    <CreateItem Include="$(OutDir)\*" 
                Exclude="$(IntermediateOutputPath)$(TargetName).pdb;@(IntermediateAssembly);$(IntermediateOutputPath)$(_SGenDllName)">
      <Output ItemName="_PostSharpCompanionFiles" TaskParameter="Include"/>
    </CreateItem>

    <Copy SourceFiles="@(_PostSharpCompanionFiles)"  DestinationFolder="$(PostSharpBackupDirectory)"/>
    
  </Target>
</Project>
