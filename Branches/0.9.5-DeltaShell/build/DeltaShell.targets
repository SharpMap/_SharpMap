<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <PropertyGroup Condition="('$(SolutionDir)' == '' or '$(SolutionDir)' == '*undefined*')">
        <SolutionDir>$(MSBuildStartupDirectory)</SolutionDir>
   </PropertyGroup>
  
  <!-- use this user.targets file as a custom user file to re-define e.g. InstallDir -->
  <!-- <Import Project="$(SolutionDir)\build\user.targets" Condition="Exists('$(SolutionDir)\build\user.targets')"/> -->

  <Import Project="$(SolutionDir)\build\tools\PostSharp\PostSharp-1.5.targets" Condition="'$(UsePostSharp)'=='true'" />

  <PropertyGroup>
    <LoaderProjectName>DeltaShell.Loader</LoaderProjectName>
    <OutputPath Condition="'$(CustomOutputPath)' != ''">$(CustomOutputPath)\</OutputPath>
    <OutDir Condition="'$(CustomOutDir)' != ''">$(CustomOutDir)\</OutDir>
    <IntermediateOutputPath Condition="'$(CustomIntermediateOutputPath)' != ''">$(CustomIntermediateOutputPath)\</IntermediateOutputPath>
    <OutDir Condition="'$(CustomOutDir)' != '' and '$(ProjectName)'=='$(LoaderProjectName)'">$(InstallDir)\bin\</OutDir>
  </PropertyGroup>

 <!-- used by loader and also as a location of plugins/ directory -->
  <PropertyGroup Condition="'$(InstallDir)'==''">
    <InstallDir>$(SolutionDir)\src\DeltaShell\DeltaShell.Loader\bin</InstallDir>
  </PropertyGroup>

  <ItemGroup>
    <GlobalLibraries Include="$(SolutionDir)\lib\*.dll"/>
  </ItemGroup>

  <ItemGroup>
    <DependentLibraries Include="$(SolutionDir)\$(ExternalDependencies)\*.*" Condition="'$(ExternalDependencies)' != ''"/>
    <DependentLibraries Include="$(SolutionDir)\$(ExternalDependencies1)\*.*" Condition="'$(ExternalDependencies1)' != ''"/>
    <DependentLibraries Include="$(SolutionDir)\$(ExternalDependencies2)\*.*" Condition="'$(ExternalDependencies2)' != ''"/>
    <DependentLibraries Include="$(SolutionDir)\$(ExternalDependencies3)\*.*" Condition="'$(ExternalDependencies3)' != ''"/>
    <DependentLibraries Include="$(SolutionDir)\$(ExternalDependencies4)\*.*" Condition="'$(ExternalDependencies4)' != ''"/>
  </ItemGroup>

  <Target Name="BeforeBuild" DependsOnTargets="_TimeStampBeforeCompile;CopyExternalDependencies">
    <Message Text="BuildInParallel: $(BuildInParallel)" />

    <MakeDir Condition="'$(IsPluginComponent)'=='true' and '$(PluginName)'!='' and !Exists('$(InstallDir)\plugins\$(PluginName)')" 
		Directories="$(InstallDir)\plugins\$(PluginName)"/>

<!--
    <Copy
        SourceFiles="@(GlobalLibraries)"
        DestinationFolder="$(TargetDir)"
	SkipUnchangedFiles="true"
	Condition="'$(TopLevelProject)'=='true' and '$(CustomOutDir)' != ''" />
-->

  </Target>

  <Target Name="CopyExternalDependencies" Condition="'@(DependentLibraries)' != ''">
    <Message Text="Copying ExternalDependencies for project $(ProjectName) ..." />
    <Copy 
        SourceFiles="@(DependentLibraries)"
        DestinationFolder="$(TargetDir)"
  	SkipUnchangedFiles="true" />
  </Target>

  <Target Name="AfterBuild" DependsOnTargets="CheckAssemblyTime">
    <Error Condition="'$(IsPluginComponent)'=='true' and '$(PluginName)'==''" Text="PluginName must be specified when IsPluginComponent==true!"/>

    <Message Text="Copying plugin component $(ProjectName) to $(InstallDir)\plugins directory ..." Condition="'$(IsPluginComponent)'=='true'" />
    <Exec 
		  WorkingDirectory="$(OutDir)" 
		  Command="$(SolutionDir)\build\tools\PluginPostBuild.cmd $(SolutionDir) $(TargetDir) $(ProjectName) $(PluginName) $(InstallDir) $(ProjectDir) > nul" 
		  Condition="'$(IsPluginComponent)'=='true'" />
  </Target>

  <!-- makes sure all crap is removed -->    
  <Target Name="AfterClean">    
    <Delete Files="$(OutDir)\$(TargetFileName)" Condition="Exists('$(OutDir)\$(TargetFileName)')" />

    <RemoveDir Directories="$(InstallDir)\plugins" Condition="'$(ProjectName)'=='$(LoaderProjectName)'" />

    <RemoveDir Directories="$(OutDir)\PostSharp.$(TargetFileName)" Condition="Exists('$(OutDir)\PostSharp.$(TargetFileName)')" />

    <Delete Files="$(IntermediateOutputPath)\time_before" Condition="Exists('$(IntermediateOutputPath)\time_before')" />
    <Delete Files="$(IntermediateOutputPath)\time_after"  Condition="Exists('$(IntermediateOutputPath)\time_after')" />
<!--    
    <RemoveDir Directories="$(ProjectDir)\bin" Condition="'$(StartUsingCommandLine)' == 'true' and '$(CustomOutDir)'=='' and Exists('$(ProjectDir)\bin')" />
    <RemoveDir Directories="$(ProjectDir)\obj" Condition="'$(StartUsingCommandLine)' == 'true' and '$(CustomOutDir)'=='' and Exists('$(ProjectDir)\obj')" />
    <RemoveDir Directories="$(IntermediateOutputPath)" Condition="Exists('$(IntermediateOutputPath)')" />
-->
  </Target>

  <Target Name="BeforeRebuild" DependsOnTargets="AfterClean" />    

  <Target Name="CheckAssemblyTime">
    <PropertyGroup>
      <AssemblyTimeDiffersAfterCompile Condition="'$(_AssemblyTimestampAfterCompile)' != '$(_AssemblyTimestampBeforeCompile)'">1</AssemblyTimeDiffersAfterCompile>
    </PropertyGroup>
  </Target>


    <!-- when running parallel build - override Private in Microsoft.Common.targets so that libs won't conflict -->
    <Target
        Name="GetCopyToOutputDirectoryItems"
        Outputs="@(AllItemsFullPathWithTargetPath)" 
        DependsOnTargets="$(GetCopyToOutputDirectoryItemsDependsOn)">

        <!-- Get items from child projects first. -->
        <MSBuild
            Projects="@(_MSBuildProjectReferenceExistent)"
            Targets="GetCopyToOutputDirectoryItems"
            BuildInParallel="$(BuildInParallel)"
            UnloadProjectsOnCompletion="$(UnloadProjectsOnCompletion)"
            Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
            Condition="'@(_MSBuildProjectReferenceExistent)' != '' and '$(_GetChildProjectCopyToOutputDirectoryItems)' == 'true' and '%(_MSBuildProjectReferenceExistent.Private)' != 'false' and ('$(CustomOutDir)' == '' or '$(ProjectName)'=='$(LoaderProjectName)')">

            <Output TaskParameter="TargetOutputs" ItemName="_AllChildProjectItemsWithTargetPath"/>

        </MSBuild>

        <!-- Target outputs must be full paths because they will be consumed by a different project. -->
        <ItemGroup>
            <AllItemsFullPathWithTargetPath            Include="@(_AllChildProjectItemsWithTargetPath->'%(FullPath)')" Condition="'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
            <_SourceItemsToCopyToOutputDirectoryAlways Include="@(_AllChildProjectItemsWithTargetPath->'%(FullPath)')" Condition="'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
            <_SourceItemsToCopyToOutputDirectory       Include="@(_AllChildProjectItemsWithTargetPath->'%(FullPath)')" Condition="'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
        </ItemGroup>

        <!-- Get items from this project last so that they will be copied last. -->
        <ItemGroup>
            <AllItemsFullPathWithTargetPath            Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(ContentWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
            <_SourceItemsToCopyToOutputDirectoryAlways Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
            <_SourceItemsToCopyToOutputDirectory       Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
        </ItemGroup>

        <ItemGroup>
            <AllItemsFullPathWithTargetPath            Include="@(EmbeddedResource->'%(FullPath)')" Condition="'%(EmbeddedResource.CopyToOutputDirectory)'=='Always' or '%(EmbeddedResource.CopyToOutputDirectory)'=='PreserveNewest'"/>
            <_SourceItemsToCopyToOutputDirectoryAlways Include="@(EmbeddedResource->'%(FullPath)')" Condition="'%(EmbeddedResource.CopyToOutputDirectory)'=='Always'"/>
            <_SourceItemsToCopyToOutputDirectory       Include="@(EmbeddedResource->'%(FullPath)')" Condition="'%(EmbeddedResource.CopyToOutputDirectory)'=='PreserveNewest'"/>
        </ItemGroup>

        <ItemGroup>
            <_CompileItemsToCopy Include="@(Compile->'%(FullPath)')" Condition="'%(Compile.CopyToOutputDirectory)'=='Always' or '%(Compile.CopyToOutputDirectory)'=='PreserveNewest'"/>
        </ItemGroup>

        <AssignTargetPath Files="@(_CompileItemsToCopy)" RootFolder="$(MSBuildProjectDirectory)">
            <Output TaskParameter="AssignedFiles" ItemName="_CompileItemsToCopyWithTargetPath" />
        </AssignTargetPath>

        <ItemGroup>
            <AllItemsFullPathWithTargetPath            Include="@(_CompileItemsToCopyWithTargetPath)"/>
            <_SourceItemsToCopyToOutputDirectoryAlways Include="@(_CompileItemsToCopyWithTargetPath)" Condition="'%(_CompileItemsToCopyWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
            <_SourceItemsToCopyToOutputDirectory       Include="@(_CompileItemsToCopyWithTargetPath)" Condition="'%(_CompileItemsToCopyWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
        </ItemGroup>

        <ItemGroup>
            <AllItemsFullPathWithTargetPath            Include="@(_NoneWithTargetPath->'%(FullPath)')" Condition="'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(_NoneWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
            <_SourceItemsToCopyToOutputDirectoryAlways Include="@(_NoneWithTargetPath->'%(FullPath)')" Condition="'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
            <_SourceItemsToCopyToOutputDirectory       Include="@(_NoneWithTargetPath->'%(FullPath)')" Condition="'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
        </ItemGroup>

    </Target>

    <Target
        Name="_CopyFilesMarkedCopyLocal">

        <Copy
            Condition="'$(CustomOutDir)' == '' or '$(ProjectName)'=='$(LoaderProjectName)'"
            SourceFiles="@(ReferenceCopyLocalPaths)"
            DestinationFiles="@(ReferenceCopyLocalPaths->'$(OutDir)%(DestinationSubDirectory)%(Filename)%(Extension)')"
            SkipUnchangedFiles="true"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)">

            <Output TaskParameter="DestinationFiles" ItemName="FileWritesShareable"/>

        </Copy>

    </Target>
</Project>
